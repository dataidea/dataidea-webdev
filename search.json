[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to DATAIDEA",
    "section": "",
    "text": "NOTE:\n\n\n\nWe have re-develped our website to use jupyter notebooks, which is the tool we mostly use for teaching. This is so that you can access updated learning materials faster.\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.\n\n\n\n\n\nProgramming for Web Development\nProgramming for Web Development is a comprehensive subject designed to cover the various programming components essential for web development. By taking this course, you’ll learn programming techniques to build dynamic and responsive websites and applications using HTML, CSS, JavaScript, and Python with Django.\nThis subject is divided into specific courses as outlined below. The duration mentioned is an average based on our previous students’ experiences, but it can vary depending on individual learning pace:\n\nHTML (1-2 weeks)\nCSS (1-2 weeks)\nJavaScript (1 month)\nPython (1 month)\nDjango (1 month)\n\nYou can choose to take the entire subject or select specific courses that are of strong interest or most applicable to your field. However, if you’re a complete beginner, we recommend enrolling in the entire program for a comprehensive learning experience.\n\n\nCourse Details\n\nDuration: Varies based on the course units chosen\nSessions: Four times a week (one-on-one)\nTiming: Evenings and/or weekends\nLocation: Online or at UMF House, Sir Apollo Kagwa Road\n\nIf you’re serious about learning programming and preparing for roles in Web Development and Data Science, we highly encourage you to enroll in our courses. Avoid wasting time on disconnected, outdated tutorials. We offer a structured and up-to-date curriculum to help you kickstart your career.\n\n\nContact Us\nFeel free to reach out to us for more information or to enroll:\n\nEmail: dataideaorg@gmail.com\nPhone: +256701520768 / +256771754118\nWebsite: www.dataidea.org\n\nWe look forward to helping you achieve your learning goals!\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Welcome to DATAIDEA"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html",
    "href": "1.HTML/11_lists.html",
    "title": "HTML Lists",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html#html-lists",
    "href": "1.HTML/11_lists.html#html-lists",
    "title": "HTML Lists",
    "section": "HTML Lists",
    "text": "HTML Lists\nHTML lists are used to organize and display information in a structured format. There are three main types of lists in HTML: ordered lists (&lt;ol&gt;), unordered lists (&lt;ul&gt;), and definition lists (&lt;dl&gt;). Understanding how to create and style lists is essential for organizing content effectively on web pages.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html#ordered-lists-ol",
    "href": "1.HTML/11_lists.html#ordered-lists-ol",
    "title": "HTML Lists",
    "section": "Ordered Lists (<ol>)",
    "text": "Ordered Lists (&lt;ol&gt;)\nOrdered lists are used to present items in a numbered sequence. Each item in the list is defined using the &lt;li&gt; (list item) element.\nExample:\n&lt;ol&gt;\n  &lt;li&gt;First item&lt;/li&gt;\n  &lt;li&gt;Second item&lt;/li&gt;\n  &lt;li&gt;Third item&lt;/li&gt;\n&lt;/ol&gt;\nIn this example, each item is automatically numbered by the browser.\n\n\nFirst item\n\n\nSecond item\n\n\nThird item",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html#unordered-lists-ul",
    "href": "1.HTML/11_lists.html#unordered-lists-ul",
    "title": "HTML Lists",
    "section": "Unordered Lists (<ul>)",
    "text": "Unordered Lists (&lt;ul&gt;)\nUnordered lists are used to present items in a bulleted or unordered sequence. Each item in the list is defined using the &lt;li&gt; element.\nExample:\n&lt;ul&gt;\n  &lt;li&gt;First item&lt;/li&gt;\n  &lt;li&gt;Second item&lt;/li&gt;\n  &lt;li&gt;Third item&lt;/li&gt;\n&lt;/ul&gt;\nIn this example, each item is displayed with a bullet point by default.\n\n\nFirst item\n\n\nSecond item\n\n\nThird item",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html#definition-lists-dl",
    "href": "1.HTML/11_lists.html#definition-lists-dl",
    "title": "HTML Lists",
    "section": "Definition Lists (<dl>)",
    "text": "Definition Lists (&lt;dl&gt;)\nDefinition lists are used to display terms and their corresponding definitions. Each term is defined using the &lt;dt&gt; (definition term) element, and each definition is defined using the &lt;dd&gt; (definition description) element.\nExample:\n&lt;dl&gt;\n  &lt;dt&gt;Term 1&lt;/dt&gt;\n  &lt;dd&gt;Definition 1&lt;/dd&gt;\n  &lt;dt&gt;Term 2&lt;/dt&gt;\n  &lt;dd&gt;Definition 2&lt;/dd&gt;\n&lt;/dl&gt;\nIn this example, each term is followed by its definition.\n\n\nTerm 1\n\n\nDefinition 1\n\n\nTerm 2\n\n\nDefinition 2",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html#additional-list-attributes",
    "href": "1.HTML/11_lists.html#additional-list-attributes",
    "title": "HTML Lists",
    "section": "Additional List Attributes",
    "text": "Additional List Attributes\n\n1. Type Attribute (for Ordered Lists)\nThe type attribute specifies the type of numbering used in ordered lists. Common values include 1 (decimal), A (uppercase alphabetical), a (lowercase alphabetical), I (uppercase Roman numeral), and i (lowercase Roman numeral).\nExample:\n&lt;ol type=\"A\"&gt;\n  &lt;li&gt;First item&lt;/li&gt;\n  &lt;li&gt;Second item&lt;/li&gt;\n  &lt;li&gt;Third item&lt;/li&gt;\n&lt;/ol&gt;\n\n\nFirst item\n\n\nSecond item\n\n\nThird item\n\n\n\n\n2. Start Attribute (for Ordered Lists)\nThe start attribute specifies the starting value for the numbering in ordered lists.\nExample:\n&lt;ol start=\"5\"&gt;\n  &lt;li&gt;Fifth item&lt;/li&gt;\n  &lt;li&gt;Sixth item&lt;/li&gt;\n  &lt;li&gt;Seventh item&lt;/li&gt;\n&lt;/ol&gt;\n\n\nFifth item\n\n\nSixth item\n\n\nSeventh item\n\n\n\n\n\n\n\n\n\n3. Compact Attribute (for Lists)\nThe compact attribute specifies whether to reduce the spacing between list items.\nExample:\n&lt;ul compact&gt;\n  &lt;li&gt;First item&lt;/li&gt;\n  &lt;li&gt;Second item&lt;/li&gt;\n  &lt;li&gt;Third item&lt;/li&gt;\n&lt;/ul&gt;\n\n\nFirst item\n\n\nSecond item\n\n\nThird item",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html#example-of-a-fully-utilized-list",
    "href": "1.HTML/11_lists.html#example-of-a-fully-utilized-list",
    "title": "HTML Lists",
    "section": "Example of a Fully Utilized List",
    "text": "Example of a Fully Utilized List\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;HTML List Example&lt;/title&gt;\n  &lt;style&gt;\n    li {\n      margin-bottom: 8px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h2&gt;Ordered List&lt;/h2&gt;\n  &lt;ol type=\"I\"&gt;\n    &lt;li&gt;First item&lt;/li&gt;\n    &lt;li&gt;Second item&lt;/li&gt;\n    &lt;li&gt;Third item&lt;/li&gt;\n  &lt;/ol&gt;\n  \n  &lt;h2&gt;Unordered List&lt;/h2&gt;\n  &lt;ul compact&gt;\n    &lt;li&gt;First item&lt;/li&gt;\n    &lt;li&gt;Second item&lt;/li&gt;\n    &lt;li&gt;Third item&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;h2&gt;Definition List&lt;/h2&gt;\n  &lt;dl&gt;\n    &lt;dt&gt;Term 1&lt;/dt&gt;\n    &lt;dd&gt;Definition 1&lt;/dd&gt;\n    &lt;dt&gt;Term 2&lt;/dt&gt;\n    &lt;dd&gt;Definition 2&lt;/dd&gt;\n  &lt;/dl&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nResult:\n&lt;!DOCTYPE html&gt;\n\n\n\n\nHTML List Example\n\n\n\n\n\nOrdered List\n\n\n\nFirst item\n\n\nSecond item\n\n\nThird item\n\n\n\nUnordered List\n\n\n\nFirst item\n\n\nSecond item\n\n\nThird item\n\n\n\nDefinition List\n\n\n\nTerm 1\n\n\nDefinition 1\n\n\nTerm 2\n\n\nDefinition 2\n\n\n\n\n\nNested HTML Lists:\nSometimes we to nest lists to make the data we represent easier to understand.\nHere’s an example of nesting HTML Lists.\n&lt;ul&gt;\n    &lt;li&gt;General Data&lt;/li&gt;\n    &lt;li&gt;\n        &lt;!-- We put another list inside an li element --&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Specific Data&lt;/li&gt;\n            &lt;li&gt;Specific Data&lt;/li&gt;\n            &lt;li&gt;Specific Data&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;Other General Data&lt;/li&gt;\n    &lt;li&gt;\n        &lt;!-- We put another list inside an li element --&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Other Specific Data&lt;/li&gt;\n            &lt;li&gt;Other Specific Data&lt;/li&gt;\n            &lt;li&gt;Other Specific Data&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\nOutput:\n\n\nGeneral Data\n\n\n\n\n\nSpecific Data\n\n\nSpecific Data\n\n\nSpecific Data\n\n\n\n\nOther General Data\n\n\n\n\n\nOther Specific Data\n\n\nOther Specific Data\n\n\nOther Specific Data\n\n\n\n\n\n\nNote!\n\n\nThere’s no limitation to the depth of nesting lists\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/11_lists.html#conclusion",
    "href": "1.HTML/11_lists.html#conclusion",
    "title": "HTML Lists",
    "section": "Conclusion",
    "text": "Conclusion\nHTML lists are versatile tools for organizing and presenting information on web pages. Whether you need to display a sequence of items, a collection of terms and definitions, or an unordered set of items, HTML lists provide a simple and effective way to structure your content. Understanding how to use lists and their attributes allows you to create clear and well-organized web pages.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Lists"
    ]
  },
  {
    "objectID": "1.HTML/12_forms.html",
    "href": "1.HTML/12_forms.html",
    "title": "HTML Forms",
    "section": "",
    "text": "Photo By DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Forms"
    ]
  },
  {
    "objectID": "1.HTML/12_forms.html#introduction-to-html-forms",
    "href": "1.HTML/12_forms.html#introduction-to-html-forms",
    "title": "HTML Forms",
    "section": "Introduction to HTML Forms",
    "text": "Introduction to HTML Forms\nHTML forms are used to collect user input. A form is an area that can contain form elements such as input boxes, checkboxes, radio buttons, submit buttons, etc. Forms are essential in web development for collecting user data and sending it to a server for processing.\n\nBasic Structure of an HTML Form\nAn HTML form is defined using the &lt;form&gt; element. Here’s a basic example:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Basic Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"/submit\" method=\"post\"&gt;\n        &lt;!-- Form elements go here --&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nForm Attributes\n\naction: Specifies the URL where the form data should be sent.\nmethod: Specifies the HTTP method to be used when sending the form data. Common values are GET and POST.\n\nGET: Appends form data to the URL. Suitable for non-sensitive data.\nPOST: Sends form data in the body of the HTTP request. Suitable for sensitive data.\n\n\n\n\nForm Elements\nInput Elements\nThe &lt;input&gt; element is used to create various types of inputs. Key attributes include type, name, value, placeholder, and required.\n\nText Input\n&lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter your name\" required&gt;\nPassword Input\n&lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n&lt;input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required&gt;\nEmail Input\n&lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n&lt;input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\" required&gt;\nNumber Input\n&lt;label for=\"age\"&gt;Age:&lt;/label&gt;\n&lt;input type=\"number\" id=\"age\" name=\"age\" min=\"1\" max=\"100\"&gt;\nRadio Buttons\n&lt;p&gt;Gender:&lt;/p&gt;\n&lt;input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\"&gt;\n&lt;label for=\"male\"&gt;Male&lt;/label&gt;\n&lt;input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\"&gt;\n&lt;label for=\"female\"&gt;Female&lt;/label&gt;\nCheckboxes\n&lt;p&gt;Skills:&lt;/p&gt;\n&lt;input type=\"checkbox\" id=\"html\" name=\"skills\" value=\"HTML\"&gt;\n&lt;label for=\"html\"&gt;HTML&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"css\" name=\"skills\" value=\"CSS\"&gt;\n&lt;label for=\"css\"&gt;CSS&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"js\" name=\"skills\" value=\"JavaScript\"&gt;\n&lt;label for=\"js\"&gt;JavaScript&lt;/label&gt;\nSubmit Button\n&lt;input type=\"submit\" value=\"Submit\"&gt;\n\nTextarea\nThe &lt;textarea&gt; element is used for multi-line text input.\n&lt;label for=\"message\"&gt;Message:&lt;/label&gt;\n&lt;textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\" placeholder=\"Enter your message here\"&gt;&lt;/textarea&gt;\nSelect Box\nThe &lt;select&gt; element is used to create a drop-down list.\n&lt;label for=\"country\"&gt;Country:&lt;/label&gt;\n&lt;select id=\"country\" name=\"country\"&gt;\n    &lt;option value=\"usa\"&gt;USA&lt;/option&gt;\n    &lt;option value=\"canada\"&gt;Canada&lt;/option&gt;\n    &lt;option value=\"uk\"&gt;UK&lt;/option&gt;\n&lt;/select&gt;\nFile Input\nThe &lt;input type=\"file\"&gt; element allows users to upload files.\n&lt;label for=\"file\"&gt;Upload a file:&lt;/label&gt;\n&lt;input type=\"file\" id=\"file\" name=\"file\"&gt;\nButton\nThe &lt;button&gt; element can be used to create various types of buttons.\n&lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n\n\nGrouping Form Elements\nFieldset and Legend\nThe &lt;fieldset&gt; element is used to group related elements in a form, and the &lt;legend&gt; element provides a caption for the &lt;fieldset&gt;.\n&lt;fieldset&gt;\n    &lt;legend&gt;Personal Information&lt;/legend&gt;\n    &lt;label for=\"fname\"&gt;First Name:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"fname\" name=\"fname\"&gt;\n    &lt;label for=\"lname\"&gt;Last Name:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"lname\" name=\"lname\"&gt;\n&lt;/fieldset&gt;\n\n\nForm Validation\nHTML5 provides built-in form validation. Here are some common validation attributes:\n\nrequired: Ensures the field is not empty.\nminlength and maxlength: Set minimum and maximum lengths for text inputs.\npattern: Defines a regex pattern the input must match.\nmin and max: Set minimum and maximum values for number inputs.\n\n&lt;label for=\"username\"&gt;Username:&lt;/label&gt;\n&lt;input type=\"text\" id=\"username\" name=\"username\" minlength=\"5\" maxlength=\"15\" required&gt;\n\n&lt;label for=\"userage\"&gt;Age:&lt;/label&gt;\n&lt;input type=\"number\" id=\"userage\" name=\"userage\" min=\"18\" max=\"100\" required&gt;\n\n\nExample Form\nHere’s a complete example that includes various form elements:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Example Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"/submit\" method=\"post\"&gt;\n        &lt;fieldset&gt;\n            &lt;legend&gt;Personal Information&lt;/legend&gt;\n            &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n            &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n            &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n        &lt;/fieldset&gt;\n\n        &lt;fieldset&gt;\n            &lt;legend&gt;Account Details&lt;/legend&gt;\n            &lt;label for=\"username\"&gt;Username:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"username\" name=\"username\" minlength=\"5\" maxlength=\"15\" required&gt;\n            &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n            &lt;input type=\"password\" id=\"password\" name=\"password\" required&gt;\n        &lt;/fieldset&gt;\n\n        &lt;fieldset&gt;\n            &lt;legend&gt;Preferences&lt;/legend&gt;\n            &lt;p&gt;Gender:&lt;/p&gt;\n            &lt;input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\"&gt;\n            &lt;label for=\"male\"&gt;Male&lt;/label&gt;\n            &lt;input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\"&gt;\n            &lt;label for=\"female\"&gt;Female&lt;/label&gt;\n\n            &lt;p&gt;Skills:&lt;/p&gt;\n            &lt;input type=\"checkbox\" id=\"html\" name=\"skills\" value=\"HTML\"&gt;\n            &lt;label for=\"html\"&gt;HTML&lt;/label&gt;\n            &lt;input type=\"checkbox\" id=\"css\" name=\"skills\" value=\"CSS\"&gt;\n            &lt;label for=\"css\"&gt;CSS&lt;/label&gt;\n            &lt;input type=\"checkbox\" id=\"js\" name=\"skills\" value=\"JavaScript\"&gt;\n            &lt;label for=\"js\"&gt;JavaScript&lt;/label&gt;\n        &lt;/fieldset&gt;\n\n        &lt;label for=\"message\"&gt;Message:&lt;/label&gt;\n        &lt;textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;\n\n        &lt;label for=\"file\"&gt;Upload a file:&lt;/label&gt;\n        &lt;input type=\"file\" id=\"file\" name=\"file\"&gt;\n\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nOuput:\n\n\nPersonal Information Name:  Email: \n\n\nAccount Details Username:  Password: \n\n\nPreferences\n\nGender:\n\n Male  Female\n\nSkills:\n\n HTML  CSS  JavaScript\n\nMessage:\n\nUpload a file:  Submit\n\n\n\nConclusion\nThis tutorial covers the basics of HTML forms, including the essential attributes and elements. By understanding these concepts, you can create forms that effectively collect and validate user input. For more advanced functionality, you might integrate JavaScript for dynamic form handling and additional validation.\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Forms"
    ]
  },
  {
    "objectID": "1.HTML/01_introduction.html#what-is-html",
    "href": "1.HTML/01_introduction.html#what-is-html",
    "title": "HTML Introduction",
    "section": "What is HTML?",
    "text": "What is HTML?\nHTML stands for Hyper Text Markup Language, it is easy and fun to learn.\nHTML describes the structure of web pages\nHTML5 is the fith and current major version of the HTML standard.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Introduction"
    ]
  },
  {
    "objectID": "1.HTML/01_introduction.html#why-learn-html5",
    "href": "1.HTML/01_introduction.html#why-learn-html5",
    "title": "HTML Introduction",
    "section": "Why learn HTML5?",
    "text": "Why learn HTML5?\nIt is essential to learn HTML if you want to build websites, you can’t build one if you don’t know HTML because it’s one of the prerequisites in learning other languages used for web development.\n\nLet’s break down what’s happening here:\n\n&lt;!DOCTYPE html&gt;: This declaration tells the web browser that the document is written in HTML5, the latest version of HTML.\n&lt;html&gt;: This tag represents the root of the HTML document.\n&lt;head&gt;: This section contains meta-information about the HTML document, such as the title, character encoding, etc.\n&lt;title&gt;: This tag sets the title of the webpage, which appears in the browser’s title bar or tab.\n&lt;body&gt;: This is where the main content of the webpage goes.\n&lt;h1&gt;, &lt;h2&gt;: These are header tags used to create headings of different levels.\n&lt;p&gt;: This tag is used to define a paragraph of text.\n&lt;ul&gt;, &lt;li&gt;: These tags are used to create an unordered list and list items, respectively.\n&lt;img&gt;: This tag is used to insert an image into the webpage. The src attribute specifies the path to the image file, and the alt attribute provides alternative text for accessibility purposes.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Introduction"
    ]
  },
  {
    "objectID": "1.HTML/01_introduction.html#html-tags",
    "href": "1.HTML/01_introduction.html#html-tags",
    "title": "HTML Introduction",
    "section": "HTML Tags",
    "text": "HTML Tags\nHTML Tags are element names surrounded by angle brackets.\nIn HTML we start and end tags. Look at the example below\n&lt;p&gt;Hello, welcome to our HTML course&lt;/p&gt;",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Introduction"
    ]
  },
  {
    "objectID": "1.HTML/01_introduction.html#start-tag-and-end-tag",
    "href": "1.HTML/01_introduction.html#start-tag-and-end-tag",
    "title": "HTML Introduction",
    "section": "Start Tag and End Tag",
    "text": "Start Tag and End Tag\n\nStart tag - also called “opening tag” eg. &lt;p&gt;\nEnd tag - also called “ending tag” eg &lt;/p&gt;\n\nThis is the basic structure of any HTML page. Memorize them!\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World!&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        \n    &lt;/body&gt;\n&lt;/html&gt;\nLearning HTML is essential for anyone interested in web development or content creation on the internet because:\n\nFoundation of Web Development: HTML is the backbone of web development. It’s the first language you’ll need to learn when starting to build web pages.\nUniversal Language: HTML is supported by all web browsers and is the standard language for creating web pages, making it a fundamental skill for anyone working on the web.\nUnderstanding Web Structure: Learning HTML teaches you how web pages are structured and how different elements interact with each other, which is crucial for effective web design and development.\nGateway to Other Technologies: HTML often goes hand-in-hand with other web technologies like CSS (Cascading Style Sheets) for styling and JavaScript for interactivity. Understanding HTML is the first step toward mastering these other technologies.\n\nIn summary, HTML is the building block of the web, and learning it is the first step toward becoming proficient in web development and design.\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Introduction"
    ]
  },
  {
    "objectID": "1.HTML/09_images.html",
    "href": "1.HTML/09_images.html",
    "title": "HTML Images",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Images"
    ]
  },
  {
    "objectID": "1.HTML/09_images.html#images",
    "href": "1.HTML/09_images.html#images",
    "title": "HTML Images",
    "section": "Images",
    "text": "Images\nHTML Images are indeed needed or required for any website.\nImages help a web site become more attractive for visitors.\nImagine a web page without even a single image, would you still browse it? Of course not.\nTo put an image on our web site we simply need to use the &lt;img /&gt; element with an src attribute to define the URL or the location of an image.\nThe &lt;img /&gt; is an empty and inline element.\n\nAttribute src\nWe use the src attribute to specify an image’s URL or file path\n\nExample\n&lt;img src=\"example.jpg\"&gt;\n\n\n\nAttribute alt\nSometimes images may not load on the user’s browser because of slow internet connection, slow server, image is deleted from directory or wrong URL value is specified in the src attribute.\nThe alt attribute provides an alternative text for an image.\n\nExample\n&lt;img src=\"dataidea_logo.jpg\" alt=\"DATAIDEA LOGO\"/&gt;\n\n\nNote!\n\n\nOn the example above, the given URL of the image does not really exist. Therefore the alternate text is shown instead.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Images"
    ]
  },
  {
    "objectID": "1.HTML/09_images.html#image-sizing-width-and-height",
    "href": "1.HTML/09_images.html#image-sizing-width-and-height",
    "title": "HTML Images",
    "section": "Image Sizing (width and height)",
    "text": "Image Sizing (width and height)\nTo resize an image we just to use the width attribute to change its width and the height attribute to change its height.\nThe value is typically in pixels.\n\nExample:\n&lt;img src=\"profile.jpg\" width=\"350\" height=\"400\" /&gt;\n\n\nNote!\n\n\nFor following best practices, we can use the style attribute to resize an image with the properties width and height and the value can be in pixels as well.\n\n\n\n\nExample:\n&lt;img src=\"profile.jpg\" style=\"width:350px; height:400px\" /&gt;\n\n\nNote!\n\n\nAs you can see the result is the same as using width and height attributes but the advantage of using the style attribute is that their width and height will not be overwritten by the style sheets.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Images"
    ]
  },
  {
    "objectID": "1.HTML/09_images.html#floating-image-left-of-right",
    "href": "1.HTML/09_images.html#floating-image-left-of-right",
    "title": "HTML Images",
    "section": "Floating Image (left of right)",
    "text": "Floating Image (left of right)\nWe can float an image to right or left side of a text.\nTo achieve this, we need to use the style attribute.\nWith the float CSS property. And the left or right value.\nExample:\n&lt;p&gt;\n    &lt;img src=\"images/star.png\" style=\"float: left; width: 50px; height: 50px;\"&gt; This image is floated left. This image is floated left.\n&lt;/p&gt;\n&lt;p&gt;\n    &lt;img src=\"images/star.png\" style=\"float: right; width: 50px; height: 50px;\"&gt; This image is floated right. This image is floated right.\n&lt;/p&gt;",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Images"
    ]
  },
  {
    "objectID": "1.HTML/09_images.html#image-as-a-link",
    "href": "1.HTML/09_images.html#image-as-a-link",
    "title": "HTML Images",
    "section": "Image as a link",
    "text": "Image as a link\nThere are some situations that we need an image to act as a link\nTo do that, just enclose the image with an &lt;a&gt; element with its href attribute.\n\nExample\n&lt;a href=\"https://blog.dataidea.org\"&gt;\n    &lt;img src=\"blog_image.jpg\" /&gt;\n&lt;/a&gt;\n\n\nNote!\n\n\nOn the examples give above, the image used is the directory/folder as the HTML file.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Images"
    ]
  },
  {
    "objectID": "1.HTML/09_images.html#image-from-external-server",
    "href": "1.HTML/09_images.html#image-from-external-server",
    "title": "HTML Images",
    "section": "Image from External Server",
    "text": "Image from External Server\nSometimes we need to put images from other web sites like Facebook, Google or Imgur to our web site.\nHere is how to do that.\n\nExample\n&lt;img src=\"https://www.example.com/image.png\"&gt;",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Images"
    ]
  },
  {
    "objectID": "1.HTML/09_images.html#tips",
    "href": "1.HTML/09_images.html#tips",
    "title": "HTML Images",
    "section": "Tips!",
    "text": "Tips!\n\nYou can use any type of image you want. For instance, if you want an animating image, you can use .gif.\nDo not put a lot of images in a web page. Your page may load too slow and your visitors may leave your site and never combe back again!\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Images"
    ]
  },
  {
    "objectID": "1.HTML/00_outline.html#html-course-outline",
    "href": "1.HTML/00_outline.html#html-course-outline",
    "title": "DATAIDEA",
    "section": "HTML Course Outline",
    "text": "HTML Course Outline\n\nIntroduction \nEditors \nElements \nAttributes \nComments \nStyles \nLinks \nImages \nTables \nLists \nForms \n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Course Outline"
    ]
  },
  {
    "objectID": "1.HTML/04_attributes.html",
    "href": "1.HTML/04_attributes.html",
    "title": "HTML Attributes",
    "section": "",
    "text": "Photo by DATAIDEA\n\n\nHTML attributes are used to add more information to an HTML Element.\n\nImportant Things to Remember\n\nHTML attributes are found in HTML tags\nHTML attributes only appear at start tags. It will never be on end tags\nHTML elements can have multiple attributes\nHTML attributes are composed of name/value pairs.\nThere are some attibutes taht can be used on all HTML Elements though they may not have effects on some elements. They are called Global attributes\n\nAn attibute is composed of:\n\nan attribute name\nan equal sign (=)\na value sorrounded by quotation marks \"value\"\n\nIt looks like this: name=\"value\"\nYou can also use single quotation marks depending on the situation, especially when the value contains double quotes\nWe will only use double quotation marks throughout the entire examples.\n\n\nAttribute lang Example:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en-US\"&gt;\n&lt;!-- html document/file content goes here --&gt;\n&lt;/html&gt;\nWe use the lang attribute to define the language of an HTML file\nThe language defined above is American English\n\n\nAttribute href Example:\n\nLinks are dfined using the anchor &lt;a&gt; element.\nOn the example above we used the href attribute to tell the browser where to go.\nWhen clicked the user will be redirected to Google(www.dataidea.org)\n\n\nAttribute title Example:\n\nThe title attribute provides a tooltip for HTML Elements.\nUnfortunately, it doesn’t work on mobile devices.\n\n\nAttribute style Example:\n\nOn the example given above we have created a paragraph using the &lt;p&gt; element.\nWe also used the style attribute to change its font-size and color.\n\n\nAttributes id and class Example:\n&lt;div id=\"name\"&gt;\n    &lt;!-- some content goes here --&gt;\n&lt;/div&gt;\n\n&lt;div class=\"name\"&gt;\n&lt;!-- some content goes here --&gt;\n&lt;/div&gt;\nThe id and class attributes give references to elements inside an HTML document\nMultiple elements can have the same class values/names.\nThe id’s value should be unique for each element.\nThese help us select elements in style sheets and scripts.\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Attributes"
    ]
  },
  {
    "objectID": "2.CSS/10_box_model.html",
    "href": "2.CSS/10_box_model.html",
    "title": "CSS Box Model",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Box Model"
    ]
  },
  {
    "objectID": "2.CSS/10_box_model.html#box-models",
    "href": "2.CSS/10_box_model.html#box-models",
    "title": "CSS Box Model",
    "section": "Box Models",
    "text": "Box Models\nCSS box model is the foundataion of desing and layout of the web.\nIt is simply a box or a rectangular box.\n\n\nNote!\n\n\nBefore we study and create CSS Layouts, we have to understand CSS box models first.\n\n\nIn CSS box model, each element is represented as a box with the following parts or properties\n\nContent: also called content box/area; it is the areawhere the content of the box is displayed\npadding: the space or area between the outer edge of the content box and the inner edge of the border; it is transparent.\nBorder: the area between margin and the padding; its width, style and color can be changed\nMargin: the area or space outside the border or outside the CSS box; it is transparent\n\nEach part or property is built up around another layer by layer.\nTo better understand the CSS box model. Here’s an illustration.\n\n\n\nCSS Box Model\n\n\nExample:\ndiv {\n    padding: 20px;\n    border: 5px solid black;\n    margin: 40px;\n}\nOutput:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Box Model"
    ]
  },
  {
    "objectID": "2.CSS/10_box_model.html#width-and-height-of-a-css-box",
    "href": "2.CSS/10_box_model.html#width-and-height-of-a-css-box",
    "title": "CSS Box Model",
    "section": "Width and Height of a CSS Box",
    "text": "Width and Height of a CSS Box\nTo get the total width or height of a CSS Box, we have to use the following formulas.\nCSS Box’s width = left border’s width + left padding’s width + content box’s width + right padding’s width + right border’s width CSS Box’s height = left border’s height + left padding’s height + content box’s height + right padding’s height + right border’s height\nFor example, if a &lt;div&gt; element has the following CSS declarations…\ndiv {\n    width: 200px;\n    height: 200px;\n    padding: 50px;\n    border: 20px solid black;\n}\n… its total width/height would then be 340px\nCSS Box’s width = 20px (left border) + 50px (left padding) + 200px (content box’s width) + 50px (right padding) + 20px (right border) = 340px\nCSS Box’s height = 20px (top border) + 50px (top padding) + 200px (content box’s height) + 50px (bottom padding) + 20px (bottom border) = 340px\nYou must have noticed that the width and height CSS properties only set the width/height of the content box not the entire CSS box:\n\n\n\nBox Model Width Height\n\n\nIns’t that annoying? Yes, in some cases.\nForexample if we only want a CSS Box to occupy the 50% of the width including the border and the padding.\nTo achieve something like that, we need the box-sizing CSS property be set to border-box.\ndiv {\n    box-sizing: border-box;\n    width: 200px;\n    height: 200px; \n    padding: 50px;\n    border: 20px solid black;\n}\nResult:\n\n\n\nNow the final rendered width/height of the element is only 200px\nIt is because the padding and borders are already included inside teh 200px\n\n\nNote!\n\n\nIt is highly recommended to use this approach in web design.\n\n\nHere is the illustration of how it works.\n\n\n\nBox Model Border Box",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Box Model"
    ]
  },
  {
    "objectID": "2.CSS/10_box_model.html#css-box-terminologies",
    "href": "2.CSS/10_box_model.html#css-box-terminologies",
    "title": "CSS Box Model",
    "section": "CSS Box Terminologies:",
    "text": "CSS Box Terminologies:\n\ncontent box/area - the area where the content of the box is displayed\npadding box/area - the content area and the element’s padding combined\nborder box/area - the padding area and the element’s borders combined\nmargin box/area - the border area and the element’s margins combined\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Box Model"
    ]
  },
  {
    "objectID": "2.CSS/05_backgrounds.html",
    "href": "2.CSS/05_backgrounds.html",
    "title": "CSS Backgrounds",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Backgrounds"
    ]
  },
  {
    "objectID": "2.CSS/05_backgrounds.html#backgrounds",
    "href": "2.CSS/05_backgrounds.html#backgrounds",
    "title": "CSS Backgrounds",
    "section": "Backgrounds",
    "text": "Backgrounds\nElement’s backgrounds can be filled with a color or image, clipped and/or resized and otherwise be modified.\nCSS background properties:\n\nbackground-color\nbackground-image\nbackground-repeat\nbackground-attachment\nbackground-position",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Backgrounds"
    ]
  },
  {
    "objectID": "2.CSS/05_backgrounds.html#background-color",
    "href": "2.CSS/05_backgrounds.html#background-color",
    "title": "CSS Backgrounds",
    "section": "Background Color",
    "text": "Background Color\nWe can specify a background color for an element using the background-color property\nThe value can be any valid CSS Color\nChanging the background color of whole page:\nbody {\n    background-color: gold;\n}\nChanging the background color of elements:\nh1 {\n    background-color: yellow;\n}\n\np {\n    background-color: pink;\n}\n\ndiv {\n    background-color: gray;\n    width: 200px;\n    height: 200px;\n}",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Backgrounds"
    ]
  },
  {
    "objectID": "2.CSS/05_backgrounds.html#background-image",
    "href": "2.CSS/05_backgrounds.html#background-image",
    "title": "CSS Backgrounds",
    "section": "Background Image",
    "text": "Background Image\nThe background-image property sets one or more images as a background of an element.\nThe format of its value should be url(\"image.jpg\"). Single quotes or no quotes work eg url('image.jpg') and url(image.jpg)\nThe text contained in the quotes are file paths.\n\n\nNote!\n\n\nDon’t use any background color or image that will disturb the text on your web page. Always keep everything readable\n\n\n\nBackground Image Repeat\nCSS automatically repeats background images horizontally and vertically.\nTo only repeat the background image horizontally or vertically, we can use the background-repeat property.\nHorizontally-repeating background image\nbody {\n    background-image: url(\"image.png\");\n    background-repeat: repeat-x\n}\nVertically-repeating background image\nbody {\n    background-image: url(\"image.png\");\n    background-repeat: repeat-y\n}\n\n\nBackground Image no-repeat\nThe no-repeat value of the background-repeat property stops a background image from repeating.\nbody {\n    background-image: url(\"image.png\");\n    background-repeat: no-repeat\n}",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Backgrounds"
    ]
  },
  {
    "objectID": "2.CSS/05_backgrounds.html#background-shorthand-property",
    "href": "2.CSS/05_backgrounds.html#background-shorthand-property",
    "title": "CSS Backgrounds",
    "section": "Background Shorthand Property",
    "text": "Background Shorthand Property\nWe can specify all CSS background properties in one single property using its shorthand property\nThe background property is a shorthand for the following CSS properties\n\nbackground-color\nbackground-image\nbackground-repeat\nbackground-attachment\nbackground-position\n\nExample:\nA CSS Background with the following properties…\nbody {\n    background-color: red;\n    background-image: url(\"image.jpg\");\n    background-repeat: no-repeat;\n}\n… can be shortened to:\nbody{\n    background: red url(\"image.jpg\") no-repeat\n}\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Backgrounds"
    ]
  },
  {
    "objectID": "2.CSS/08_padding.html",
    "href": "2.CSS/08_padding.html",
    "title": "CSS Padding",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Padding"
    ]
  },
  {
    "objectID": "2.CSS/08_padding.html#css-padding",
    "href": "2.CSS/08_padding.html#css-padding",
    "title": "CSS Padding",
    "section": "CSS Padding",
    "text": "CSS Padding\nCSS Padding creates space within an element\nIt clears an area around the inside of an element.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Padding"
    ]
  },
  {
    "objectID": "2.CSS/08_padding.html#css-padding---individual-sides",
    "href": "2.CSS/08_padding.html#css-padding---individual-sides",
    "title": "CSS Padding",
    "section": "CSS Padding - Individual Sides",
    "text": "CSS Padding - Individual Sides\nThe following properties set the length of the padding on each side\n\npadding-top: sets the padding area on top of an element\npadding-right: sets the padding area on the right of an element\npadding-bottom: sets the padding area on the bottom of an element\npadding-left: sets the padding area on the left of an element\n\nValid values:\n\n&lt;length&gt;\n&lt;percentage&gt;\n\nExample:\nHere is an example of different padding lenghts on each side.\ndiv {\n    padding-top: 30px;\n    padding-right: 50px;\n    padding-bottom: 70px;\n    padding-left: 90px;\n    background: lightgrey;\n    border: 1px solid red; \n}\nOutput:\n\n\nHere is an example of different padding lenghts on each side.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Padding"
    ]
  },
  {
    "objectID": "2.CSS/08_padding.html#css-padding---shorthand-property",
    "href": "2.CSS/08_padding.html#css-padding---shorthand-property",
    "title": "CSS Padding",
    "section": "CSS Padding - Shorthand Property",
    "text": "CSS Padding - Shorthand Property\nThe padding CSS property is a shorthand for the following properties:\n\npadding-top\npadding-right\npadding-bottom\npadding-left\n\nThe padding CSS property can have one, two, three, or four values.\n\nWhen one value is specified, it applies the same padding to all four sides\nWhen two values are specified, the first value applies to the top and bottom, the second value applies to the left and right\nWhen three values are specified, the first value applies to the top, the second to the left and right and the third to the bottom\nWhen four values are specified, the paddings apply to the top, right, bottom and left in that order (clockwise) respectively.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Padding"
    ]
  },
  {
    "objectID": "2.CSS/08_padding.html#padding-and-width",
    "href": "2.CSS/08_padding.html#padding-and-width",
    "title": "CSS Padding",
    "section": "Padding and Width",
    "text": "Padding and Width\nThe CSS width property only specifies the width of an element’s content area. It does not include padding, borders and margins.\nTherefore if an element has a specified width and padding, they will be added together.\nExample:\ndiv {\n    width: 200px;\n    padding: 10px;\n    /* the actual rendered width */\n    /* is now 220px */\n    background: blue;\n    height: 100px; \n}\nOutput:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Padding"
    ]
  },
  {
    "objectID": "2.CSS/08_padding.html#padding-and-height",
    "href": "2.CSS/08_padding.html#padding-and-height",
    "title": "CSS Padding",
    "section": "Padding and Height",
    "text": "Padding and Height\nThe CSS height property only specifies the height of an element’s content area. It does not include padding, borders and margins\nTherefore if an element has a specified height and padding, they will be added together.\nExample:\ndiv {\n    height: 200px;\n    padding: 10px;\n    /* the actual rendered height */\n    /* is now 220px */\n    background: blue;\n    width: 100px;\n}\nOutput:\n\n\n\nTo keep the height at 200px we need to set the box-sizing to border-box.\nIncreasing the padding will now decrease the content space inside the element\nExample:\ndiv {\n    height: 200px;\n    padding: 10px;\n    /* the actual rendered */\n    /* height is still 200px */\n    background: blue;\n    width: 100px;\n}\nOutput:\n\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Padding"
    ]
  },
  {
    "objectID": "2.CSS/02_syntax.html",
    "href": "2.CSS/02_syntax.html",
    "title": "CSS Syntax, Selectors, Comments",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Syntax, Selectors, Comments"
    ]
  },
  {
    "objectID": "2.CSS/02_syntax.html#css-syntax",
    "href": "2.CSS/02_syntax.html#css-syntax",
    "title": "CSS Syntax, Selectors, Comments",
    "section": "CSS Syntax:",
    "text": "CSS Syntax:\nCSS syntax follows a simple structure consisting of selectors and declaration blocks.\n\nSelectors\nThese are patterns used to select the HTML elements you want to style. You can select elements by their tag name, class, ID, attributes, or relationship with other elements.\nExample:\nh1 {\n  color: blue;\n}\nIn this example, h1 is the selector, targeting all &lt;h1&gt; elements, and color: blue; is a declaration block that sets the text color of those elements to blue.\n\n\nDeclaration Blocks\nThese are enclosed within curly braces {} and contain one or more declarations separated by semicolons ;.\nExample:\nselector {\n  property1: value1;\n  property2: value2;\n  /* more properties */\n}\nEach declaration consists of a property and its corresponding value, separated by a colon :.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Syntax, Selectors, Comments"
    ]
  },
  {
    "objectID": "2.CSS/02_syntax.html#css-selectors",
    "href": "2.CSS/02_syntax.html#css-selectors",
    "title": "CSS Syntax, Selectors, Comments",
    "section": "CSS Selectors:",
    "text": "CSS Selectors:\nSelectors are fundamental to CSS as they allow you to target specific HTML elements for styling. Here are some common types of selectors:\n\nElement Selector\nTargets elements by their tag name.\nExample:\np {\n  font-size: 16px;\n}\nThis selector targets all &lt;p&gt; elements and sets their font size to 16 pixels.\n\n\nClass Selector\nTargets elements with a specific class attribute.\nExample:\n.highlight {\n  background-color: yellow;\n}\nThis selector targets all elements with the class “highlight” and gives them a yellow background color.\n\n\nID Selector\nTargets a single element with a specific ID attribute.\nExample:\n#header {\n  font-size: 24px;\n}\nThis selector targets the element with the ID “header” and sets its font size to 24 pixels.\n\n\nDescendant Selector\nTargets elements that are descendants of another element.\nExample:\ndiv p {\n  font-style: italic;\n}\nThis selector targets all &lt;p&gt; elements that are descendants of &lt;div&gt; elements and sets their font style to italic.\n\n\nChild Selector\nTargets elements that are direct children of another element.\nExample:\nul &gt; li {\n  list-style-type: square;\n}\nThis selector targets all &lt;li&gt; elements that are direct children of &lt;ul&gt; elements and sets their list style type to square.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Syntax, Selectors, Comments"
    ]
  },
  {
    "objectID": "2.CSS/02_syntax.html#grouping-selectors",
    "href": "2.CSS/02_syntax.html#grouping-selectors",
    "title": "CSS Syntax, Selectors, Comments",
    "section": "Grouping Selectors",
    "text": "Grouping Selectors\nSometimes multiple CSS rulesets may have similar declarations. Take a look at the example below:\nh1 {\n  font-family: Times New Roman;\n  color: green;\n}\n\nh1 {\n  font-family: Times New Roman;\n  color: green;\n}\nLooks inefficient right? Instead of repeating the same declarations we can simply have a group of selectors in a CSS ruleset.\nA group of selectors consists of selectors separated by commas\nExample:\nh1, p {\n  font-family: Times New Roman;\n  color: green;\n}",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Syntax, Selectors, Comments"
    ]
  },
  {
    "objectID": "2.CSS/02_syntax.html#css-comments",
    "href": "2.CSS/02_syntax.html#css-comments",
    "title": "CSS Syntax, Selectors, Comments",
    "section": "CSS Comments:",
    "text": "CSS Comments:\nCSS comments allow you to add explanatory notes within your stylesheet.\n\nSingle-line Comments\nBegin with /* and end with */ and extend to the end of the line.\nExample:\n/* This is a single-line comment */ \n\n\nMulti-line Comments\nAlso enclosed within /* */, allowing comments to span multiple lines.\nExample:\n/*\n  This is a multi-line comment\n  It can span across multiple lines\n*/\n\n\nNote!\n\n\nomments are useful for documenting your CSS code, explaining complex styles, or temporarily disabling certain styles for testing purposes. They improve code readability and maintainability.\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Syntax, Selectors, Comments"
    ]
  },
  {
    "objectID": "2.CSS/01_introduction.html#what-is-css",
    "href": "2.CSS/01_introduction.html#what-is-css",
    "title": "DATAIDEA",
    "section": "What is CSS?",
    "text": "What is CSS?\nCSS (Cascading Style Sheets) is a style sheet language used for describing the presentation of a document written in markup languages like HTML. CSS separates the content of a webpage from its visual presentation, allowing developers to control the layout, colors, fonts, and other design aspects of a website.",
    "crumbs": [
      "Home",
      "2.CSS",
      "What is CSS?"
    ]
  },
  {
    "objectID": "2.CSS/01_introduction.html#prerequisites-for-learning-css-include",
    "href": "2.CSS/01_introduction.html#prerequisites-for-learning-css-include",
    "title": "DATAIDEA",
    "section": "Prerequisites for learning CSS include:",
    "text": "Prerequisites for learning CSS include:\n\nBasic HTML: Since CSS is used to style HTML elements, having a basic understanding of HTML is necessary.\nWeb Development Concepts: Familiarity with web development concepts and terminology will be helpful in understanding CSS principles and practices.",
    "crumbs": [
      "Home",
      "2.CSS",
      "What is CSS?"
    ]
  },
  {
    "objectID": "2.CSS/01_introduction.html#reasons-for-using-css",
    "href": "2.CSS/01_introduction.html#reasons-for-using-css",
    "title": "DATAIDEA",
    "section": "Reasons for using CSS:",
    "text": "Reasons for using CSS:\n\nSeparation of Concerns: CSS separates the structure (HTML) of a webpage from its presentation (CSS), making code easier to maintain and update.\nConsistency: It allows developers to apply consistent styling across multiple pages of a website or different websites.\nFlexibility: CSS provides precise control over the appearance of individual elements on a webpage, including layout, colors, fonts, spacing, etc.\nAccessibility: Enhances the accessibility of web content by allowing developers to specify properties such as text size, contrast, and layout, making websites more usable for people with disabilities.\nResponsive Design: CSS plays a crucial role in creating responsive websites that adapt to different screen sizes and devices, providing a seamless user experience across desktops, tablets, and smartphones.",
    "crumbs": [
      "Home",
      "2.CSS",
      "What is CSS?"
    ]
  },
  {
    "objectID": "2.CSS/01_introduction.html#example-css-code",
    "href": "2.CSS/01_introduction.html#example-css-code",
    "title": "DATAIDEA",
    "section": "Example CSS code:",
    "text": "Example CSS code:\n/* Resetting default styles and setting a base font */\nbody {\n  font-family: Arial, sans-serif;\n  background-color: #f0f0f0; /* Light gray background */\n  margin: 0; /* Remove default margins */\n  padding: 0; /* Remove default padding */\n}\n\n/* Styling heading elements */\nh1 {\n  color: #333; /* Dark gray color for headings */\n}\n\n/* Styling paragraph elements */\np {\n  color: #666; /* Light gray color for paragraphs */\n  line-height: 1.5; /* Set line height for better readability */\n}\nIn this version:\n\nStyles related to the body element are grouped together, including resetting default styles and setting a base font and background color.\nStyles for heading elements (h1) are grouped together, setting the color.\nStyles for paragraph elements (p) are grouped together, setting the color and line height.",
    "crumbs": [
      "Home",
      "2.CSS",
      "What is CSS?"
    ]
  },
  {
    "objectID": "2.CSS/04_colors.html",
    "href": "2.CSS/04_colors.html",
    "title": "CSS Colors",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Colors"
    ]
  },
  {
    "objectID": "2.CSS/04_colors.html#colors",
    "href": "2.CSS/04_colors.html#colors",
    "title": "CSS Colors",
    "section": "Colors",
    "text": "Colors\nCSS provides various ways to specify colors, including:\n\nNamed colors\nHexadecimal (hex) colors\nRGB andRGBA colors\nHSL and HSLA colors.\n\nEach method has its advantages and use cases.\n\nNamed Colors\nCSS defines a set of named colors that you can use directly in your stylesheets. Some common named colors include “red”, “blue”, “green”, “yellow”, “black”, “white”, etc.\nExample:\nWe can set the color of a heading h1 to be red as:\nh1 {\n    color: red;\n}\n\n\nHexadecimal (Hex) Colors\nHexadecimal notation represents colors using a combination of six hexadecimal digits, each specifying the intensity of red, green, and blue (RGB) components. Hex colors start with a hash symbol #, followed by six characters (0-9, A-F).\nExample:\nWe can set the color of a heading h1 to be red and green background like:\nh1 {\n    color: #ff0000; /* Red */\n    background-color: #00ff00; /* Green */\n}\n\n\nRGB Colors\nRGB notation defines colors using a combination of red, green, and blue color values. Each color value is specified as an integer between 0 and 255.\nExample:\nWe can set the color of a heading h1 to be red and green background like:\nh1 {\n    color: rgb(255, 0, 0); /* Red */\n    background-color: rgb(0, 255, 0); /* Green */\n}\n\n\nRGBA Colors\nRGBA notation extends RGB by adding an alpha channel, which represents the opacity of the color. The alpha value is a number between 0 (fully transparent) and 1 (fully opaque).\nExample:\nWe can set the color of a heading h1 to be red and green background like:\nh1 {\n    /* Red with 50% opacity */\n    color: rgba(255, 0, 0, 0.5); \n    /* Green with 75% opacity */\n    background-color: rgba(0, 255, 0, 0.75); \n}\n\n\nHSL Colors\nHSL (Hue, Saturation, Lightness) notation defines colors using three parameters: hue, saturation, and lightness. Hue represents the color itself (0-360), saturation represents the intensity of the color (0-100%), and lightness represents the brightness (0-100%).\nExample:\nWe can set the color of a heading h1 to be red and green background like:\nh1 {\n    color: hsl(0, 100%, 50%); /* Red */\n    background-color: hsl(120, 100%, 50%); /* Green */\n}\n\n\nHSLA Colors\nHSLA notation extends HSL by adding an alpha channel for opacity.\nExample:\nWe can set the color of a heading h1 to be red and green background like:\nh1 {\n    /* Red with 50% opacity */\n    color: hsla(0, 100%, 50%, 0.5); \n    /* Green with 75% opacity */\n    background-color: hsla(120, 100%, 50%, 0.75); \n}  \n\n\nNote!\n\n\nEach color notation has its advantages and use cases. Experiment with different color formats to find the one that best suits your design needs.\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Colors"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html",
    "href": "4.Python/04_operators.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html#operators",
    "href": "4.Python/04_operators.html#operators",
    "title": "DATAIDEA",
    "section": "Operators",
    "text": "Operators\nOperators are symbols that perform operations on operands. Operands can be variables, strings, numbers, booleans etc",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html#arithmetic",
    "href": "4.Python/04_operators.html#arithmetic",
    "title": "DATAIDEA",
    "section": "Arithmetic",
    "text": "Arithmetic\nArithemators are symbols that perform mathematical operations on operands\n\n\n\nArithmetic Operator\nDescription\n\n\n\n\n+\nAddition\n\n\n-\nSubraction\n\n\n/\nDivision\n\n\n*\nMultiplication\n\n\n**\nExponentiates\n\n\n%\nRemainder\n\n\n\n\n# Let \nx = 10 \ny = 5\n\n\n# Addition\nsummation = x + y\nprint(summation)\n\n15\n\n\n\n# Subraction\ndifference = x - y\nprint(difference)\n\n5\n\n\n\n# Division\nquotient = x / y\nprint(quotient)\n\n2.0\n\n\n\n# Multiplication\nproduct = x * y\nprint(product)\n\n50\n\n\n\n# Exponentiation \nexponent = x ** y\nprint(exponent)\n\n100000\n\n\n\n# Remainder\nremainder = x % y\nprint(remainder)\n\n0\n\n\n\n# Floor Division\nfloor = 10 / 4\nprint(floor)\n\n2.5\n\n\n\n# Perform in a sequence\nans = 10 * 3 / 2 + 1\nprint(ans)\n\n16.0",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html#assignment",
    "href": "4.Python/04_operators.html#assignment",
    "title": "DATAIDEA",
    "section": "Assignment",
    "text": "Assignment\nAssignment operators are used to assign values to variables.\n\n\n\nName\nOperation\nSame As\n\n\n\n\nAssignment\nx = y\nx = y\n\n\nAddition Ass\nx += y\nx = x + y\n\n\nSubtraction Ass\nx -= y\nx = x - y\n\n\nMult Ass\nx *= y\nx = x * y\n\n\nDivision Ass\nx /= y\nx = x / y\n\n\nExpo Ass\nx **= y\nx = x ** y\n\n\nRemainder Ass\nx %= y\nx = x % y\n\n\nFloor Div Ass\nx //= y\nx = x // y\n\n\n\n\n# Examples\n# Assignment\nx = 10\n# Addition Ass\nx += 5 # x = x + 5 =&gt; x = 10 + 5 =&gt; x = 15\nprint(x)\n\n15\n\n\n\n# Subraction Ass\nx = 10\nx -= 5 # x = x - 5 =&gt; x = 10 - 5 =&gt; x = 5\nprint(x)\n\n5",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html#comparison",
    "href": "4.Python/04_operators.html#comparison",
    "title": "DATAIDEA",
    "section": "Comparison",
    "text": "Comparison\nA comparison operator compares its operands and returns a Boolean value based on whether the comparison is True of False\n\n\n\nName\nOperation\n\n\n\n\nEquality\n==\n\n\nInequality\n!=\n\n\nGreater than\n&gt;\n\n\nLess than\n&lt;\n\n\nGreater or equal\n&gt;=\n\n\nLess or equal\n&lt;=\n\n\n\n\n# Examples\n# Equality \n'Voila' == 'Viola'\n\nFalse\n\n\n\n# Inequality \n'Voila' != 'Viola'\n\nTrue\n\n\n\n# Greater or Equal\n34 &gt;= 43\n\nFalse\n\n\n\n# Tip\nprint('Voila' == 'Viola' == 'Voila')\n#       False == True =&gt; False\n\nFalse\n\n\n\n# weight = int(input(\"Enter your weight: \"))\n# height = int(input('Enter your height: '))\n\nweight = 56\nheight = 1.5\n\nbmi = weight/(height**2)\n\nif bmi &gt; 28:\n    print('You are over weight')\nelif bmi &gt; 18:\n    print('You are normal weight')\nelse:\n    print('You are under weight')\n\nYou are normal weight",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html#identity",
    "href": "4.Python/04_operators.html#identity",
    "title": "DATAIDEA",
    "section": "Identity",
    "text": "Identity\nIdentity operators are used to compare two values to determine if they point to the same object\n\n\n\nOperator\nName\n\n\n\n\nis\nThe is operator\n\n\nis not\nThe is not operator\n\n\n\n\n# Example\n# is\nx = 5\ny = 4\nz = x # x = 5 =&gt; z = 5\n\nprint(x is not z)\n\nFalse",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html#logical",
    "href": "4.Python/04_operators.html#logical",
    "title": "DATAIDEA",
    "section": "Logical",
    "text": "Logical\nLogical operators are commonly used with Booleans. In Python, there are 3 logical operators\n\n\n\nOperator\nDescription\n\n\n\n\nand\nLogical and operator\n\n\nor\nLogical or\n\n\nnot\nLogical not\n\n\n\n\nLogical and\nThe logical and operator returns True if both operands are True\n\n# Example\n# Logical and\nx = 4\nprint(x &gt; 3 and 8 &lt; x)\n#               True and False =&gt; False\n\nFalse\n\n\n\n\nLogical or\nThe logical or operator returns True if one of the operands is True\n\n# Logical or\ny = 7\nexpression_2 = 10 &gt; y or 4 &gt; y\n#                   True or False =&gt; True\nprint(expression_2)\n\nTrue\n\n\n\n\nLogical not\nThe logical not operator returns True if the operand is False, otherwise returns False if the operand is True\n\n# Logical not\nz = 8\nexpression_3 = not(10 == z)\n#               not False =&gt; True\nprint(expression_3)\n\nTrue",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/04_operators.html#membership",
    "href": "4.Python/04_operators.html#membership",
    "title": "DATAIDEA",
    "section": "Membership",
    "text": "Membership\nMembership operators are used to check if a sequence is present in an object like a string, list etc\n\n\n\nOperator\nName\n\n\n\n\nin\nThe in operator\n\n\nnot in\nThe not in operator\n\n\n\n\n# Example\nname = 'Tinye Robert'\nprint('Robert' not in name)\n\nFalse\n\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Operators"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html",
    "href": "4.Python/07_advanced.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#advanced",
    "href": "4.Python/07_advanced.html#advanced",
    "title": "DATAIDEA",
    "section": "Advanced",
    "text": "Advanced",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#classes-and-objects",
    "href": "4.Python/07_advanced.html#classes-and-objects",
    "title": "DATAIDEA",
    "section": "Classes and Objects",
    "text": "Classes and Objects\n\n \n\nIn Python, everything is an object.A class helps us create objects.\n\nCreating a Class\nUse the class keyword to create a class\n\nclass Person:\n    first_name = \"Betty\"\n    last_name = \"Kawala\"\n    age = 30\n\n## Instantiating a class\n# Now we can ceate an object from the class by instantiating it.\n# To instantiate a class, add round brackets to the class name.\n\nperson_obj1 = Person()\n\ntype(person_obj1)\n\n__main__.Person\n\n\n\n# print attributes\nprint(person_obj1.first_name)\nprint(person_obj1.last_name)\nprint(person_obj1.age)\n\nBetty\nKawala\n30",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#class-attributes",
    "href": "4.Python/07_advanced.html#class-attributes",
    "title": "DATAIDEA",
    "section": "Class Attributes",
    "text": "Class Attributes\nA class can have attributes. Forexample the Person Class can have attributes like the name, height and feet\n\nclass Person:\n    def __init__(self, name, height, feet):\n        self.name = name\n        self.height = height\n        self.feet = feet\n\n\nperson_obj1 = Person(name='Betty Kawala', height=1.57, feet=4)\n\nprint('Name:', person_obj1.name)\nprint('Height:', person_obj1.height)\nprint('Feet:', person_obj1.feet)\n\nName: Betty Kawala\nHeight: 1.57\nFeet: 4",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#methods",
    "href": "4.Python/07_advanced.html#methods",
    "title": "DATAIDEA",
    "section": "Methods",
    "text": "Methods\nMethods are functions that can access the class attributes. These methods should be defined (created) inside the class\n\nclass Person:\n    def __init__(self, name, height, feet):\n        self.name = name\n        self.height = height\n        self.feet = feet\n        \n    def jump(self):\n        return \"I'm jumping \" + str(self.feet) + \" Feet\"\n\n\nperson_obj1 = Person(name='Juma', height=1.59, feet=5)\n\nprint(person_obj1.jump())\n\nI'm jumping 5 Feet\n\n\nAs you may notice, we used self parameter to access the feet attribute.",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#python-inheritance",
    "href": "4.Python/07_advanced.html#python-inheritance",
    "title": "DATAIDEA",
    "section": "Python Inheritance",
    "text": "Python Inheritance\nInheritance is a feature that allows us to create a class that inherits the attributes or properties and methods of another class\n\nExample\nThe Animal class below can be used to tell that an animal can eat\n\nclass Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def eat(self):\n        print(f\"{self.name} is eating.\")\n\nLet’s say we need to create another class called Dog.\nSince a dog is also an animal, it’s more efficient to have access to all the properties and methods of the Animal class than to create another\nThis example creates a class named Dog and inherits from the Animal class\n\nclass Dog(Animal):\n    def __init__(self, name, age, color):\n        super().__init__(name, age)\n        self.color = color\n\n    def sound(self):\n        print(self.name, \"barks\")\n\nNow we can use the properties and methods of both the Animal and the Dog classes using just one instance\n\ndog1 = Dog(name='Brian', age=8, color='White')\ndog1.eat()\ndog1.sound()\n\nBrian is eating.\nBrian barks\n\n\nThe super() and __init__ functions found in the Dog class allow us to inherit the properties and methods of the Animal class.\n\n\nParent and Child Class\nThe parent class is the class from whick the other class inherits from.\nThe child class is the the class that inherits from another class\nIn our example above, the Animal is the parent class while the Dog class is the child class",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#more-class-and-inheritance-examples",
    "href": "4.Python/07_advanced.html#more-class-and-inheritance-examples",
    "title": "DATAIDEA",
    "section": "More Class and Inheritance Examples",
    "text": "More Class and Inheritance Examples\n\nAnimal\n\nclass Animal:\n    def __init__(self, name, sound):\n        self.name = name \n        self.sound = sound\n\n    def speak(self):\n        print(self.name + ' is ' + self.sound + 'ing')\n\nclass Dog(Animal):\n    def __init__(self, name, sound):\n        super().__init__(name, sound)\n\n    def walk(self):\n        print( self.name + ' is ' + 'walking...')\n        # return\n    \n\nclass Snake(Animal):\n    def __init__(self, name, sound):\n        super().__init__(name, sound)\n\n    def crawl(self):\n        print(self.name + ' is ' + 'crawling..')\n\nsnake1 = Snake(name='Sensei', sound='Hiss')\n\nsnake1.speak()\n\nSensei is Hissing\n\n\n\n\nLibrary\n\nclass Library:\n    def __init__(self, name):\n        self.name = name\n        self.books = []    # list of books\n        self.lent_books = [] # list of lent books\n\n    # add book to the library\n    def addBook(self, book):\n        self.books.append(book) \n\n    # add many books to the library\n    def addManyBooks(self, books):\n        self.books.extend(books)\n\n    # display books in the library\n    def displayBooks(self):\n        for book in self.books:\n            print(book)\n\n    # lend book to a person\n    def lendBook(self, title, person):\n        for book in self.books:\n            if book.title == title:\n                if book.title not in self.lent_books:\n                    person.borrowed_books.append(book)\n                    self.lent_books.append(book.title)\n                    return\n                else:\n                    print(title + ' is not availabe')\n                    return\n        print('There no such book in the library') \n\n    def __str__(self):\n        return str(self.name)\n\n\nclass Book:\n    def __init__(self, title, author):\n        self.title = title \n        self.author = author\n        self.available = True\n\n    def __str__(self):\n        return str(self.title)\n\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n        self.borrowed_books = [] # list of borrowed books\n\n    # display all borrowed books\n    def displayBooks(self):\n        for book in self.borrowed_books:\n            print(book)\n\n    def __str__(self):\n        return str(self.name)\n\n\n# create our library\nstat_library = Library(name='Stat-Lib')\n\n\n# create our people\nviola = Person(name='Viola')\nshafara = Person(name='Shafara')\nbetty = Person(name='Betty')\n\n\n# create our books\nour_books = [\n    Book(title='Song of Lawino', author=\"Okot p'Bitek\"),\n    Book(title='Da Vinci Code', author='Dan Brown'),\n    Book(title='Harry Potter', author='JK Rowling')\n] \n\n# add books to the library\nstat_library.addManyBooks(books=our_books)\n\n\n# display available books in the library\nstat_library.displayBooks()\n\nSong of Lawino\nDa Vinci Code\nHarry Potter\n\n\n\n# lend out book \nstat_library.lendBook(title='Harry Potter', person=betty)\n\n\n# lend out book\nstat_library.lendBook(title='Song of Lawino', person=betty)\n\n\n# display books borrowed by Betty\nbetty.displayBooks()\n\nHarry Potter\nSong of Lawino\n\n\n\n# display all lent out books\nstat_library.lent_books\n\n['Harry Potter', 'Song of Lawino']\n\n\n\n# try lending out an already lent book\nstat_library.lendBook(title='Song of Lawino', person=viola)\n\nSong of Lawino is not availabe\n\n\n\n# lend out book\nstat_library.lendBook(title='Da Vinci Code', person=viola)\n\n\n# try lending out non existent book\nstat_library.lendBook(title='Angels and Demons', person=shafara)\n\nThere no such book in the library",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#formatted-strings",
    "href": "4.Python/07_advanced.html#formatted-strings",
    "title": "DATAIDEA",
    "section": "Formatted Strings",
    "text": "Formatted Strings\n\n \n\n\nstatement = '{} loves to code in {}'\n\nformatted = statement.format('Juma', 'JavaScript')\n\nprint(formatted)\n\nJuma loves to code in JavaScript\n\n\n\nname = 'Juma'; language = 'JavaScript'\n\nstatement = f'{name} loves to code in {language}'\n\nprint(statement)\n\nJuma loves to code in JavaScript\n\n\n\nanswer = f'The summation of 5 and 7 is {5 + 7}'\n\nprint(answer)\n\nThe summation of 5 and 7 is 12\n\n\n\n# Using indexes\n\nname = 'Juma'\nlanguage = 'javascript'\n\nstatement = f'{name} loves to code in {language}'\n\nmodified = statement.format(language='JavaScript', name='Juma')\n\nprint(modified)\n\nJuma loves to code in javascript\n\n\n\nname = 'Viola'\nfruit = 'orange'\nexpression = 'so much'\n\n# positional formating\nstatement = '{} loves my {}'.format(name, fruit)\n\nprint(statement)\n\nViola loves my orange\n\n\n\n# indexing\nstatement = '{0} loves my {1}'.format(name, fruit)\n\nprint(statement)\n\nViola loves my orange",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#tryexcept",
    "href": "4.Python/07_advanced.html#tryexcept",
    "title": "DATAIDEA",
    "section": "try…except",
    "text": "try…except\n\n# try:\n#     statements\n# except:\n#     statements\ndef dataideaArithmetic(x, y, operation):\n    if operation == '+':\n        return x + y\n    elif operation == '-':\n        return x - y\n    elif operation == '/':\n        return x / y \n    else:\n        return x * y\n\n\nprint('''\n    DATAIDEA Arithmects:\n      \nInstructions\n-------------------------\nEnter only two numbers and the operation as +, -, /, x\n''')\n\n\n# number1 = float(input('Enter first number: '))\n# number2 = float(input('Enter second number: '))\n# operator = input('Enter the operator: ')\n\n\ntry:\n    answer = dataideaArithmetic(number1, number2, operator)\n    print(f'{number1}{operator}{number2} = {answer}')\nexcept:\n    print('A problem occured while running the operation')\nelse:\n    print('Your code has run successfully!')\nfinally:\n    print('Code execution complete.')\n\ntry:\n    # age = input('Enter your age: ')\n    age = '32'\n    age_integer = int(age)\n\n    if age_integer &gt;= 18:\n        print('Your vote has been cast')\n    else:\n        print('You are not eligible to vote')\nexcept ValueError:\n    print('A problem occured while picking your age \\n'\n          'You did not enter a number')\nelse:\n    print('Thanks for participating!')\n\n\n    DATAIDEA Arithmects:\n      \nInstructions\n-------------------------\nEnter only two numbers and the operation as +, -, /, x\n\n2.022.0 = 4.0\nYour code has run successfully!\nCode execution complete.\nYou are not eligible to vote\nThanks for participating!\n\n\n\n# Creating your own errors\n\ntry: \n    # age = int(input('Enter your age: '))\n    age = ''\n\n    if age &lt; 18:\n        raise Exception('Not an adult')\nexcept Exception as error:\n    print('A problem occurred \\n'\n          f'Error: {error}')\n\nA problem occurred \nError: '&lt;' not supported between instances of 'str' and 'int'",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/07_advanced.html#variable-scope",
    "href": "4.Python/07_advanced.html#variable-scope",
    "title": "DATAIDEA",
    "section": "Variable Scope",
    "text": "Variable Scope\n\n \n\n\n# local scope\n# a variable that is created/defined \n# inside a function has a local scope\n\n# create a fucntion that greats people\n\n# - All variable declared outside a function global\n\nname = 'Voila'\n\ndef my_func():\n    global my_fruit\n    my_fruit = 'orange'\n    # print(name + ' loves my ' + my_fruit)\n\nmy_func()\n\nprint(my_fruit)\n\norange\n\n\n\nnumber = 45 # defined outside a function\n\n# can be accessed here\nprint(number)\n\ndef getSquare():\n    # can also be accessed here\n    print(number ** 2)\n\ngetSquare()\n\n45\n2025\n\n\n\n#Local Scope\n\ndef add():\n    number1 = 5\n    number2 = 7\n    summ = number1 + number2\n    return summ\n\n# print(add())\ntry: \n    print(summ)\nexcept:\n    print(\"summ is not defined\")\n\nsumm is not defined\n\n\n\n# Global Keyword\n\ndef add():\n    global summ\n    number1 = 5\n    number2 = 7\n    summ = number1 + number2\n    return summ\n\nadd()\n\nprint(summ)\n\n12\n\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Advanced"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html",
    "href": "4.Python/01_basics.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#basics",
    "href": "4.Python/01_basics.html#basics",
    "title": "DATAIDEA",
    "section": "Basics",
    "text": "Basics\n\nOverview\nThis course will teach you the basics and advanced concepts of Python Programming\n\n\nPrerequisites\nWhat do you need before learning Python?\n\nComputer Literacy\nKnowledge of installing a software\nA compiler\n\n\n\nPython is Easy\n\nTo learn Python, you don’t need any prior knowledge of experience on programming.\nPython is human readable, making it easier to understand.\nTake alook at this example\n\n\nx = 4\ny = 3\nsumm = x + y\nprint(summ)\n\n7\n\n\nAlthough we have not taught you how to code in Python yet, you can still easily pick up what the code is doing",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#what-is-python",
    "href": "4.Python/01_basics.html#what-is-python",
    "title": "DATAIDEA",
    "section": "What is Python",
    "text": "What is Python\n\nPython is a programming language.\nPython is one of the most popular programming languages\n\n\nWho created Python?\nPython was created by Guido van Rossum and it was first implemented in 1989\n\n\nWhat is Python used for?\nPython is used for: 1. Web Development 2. Machine Learning 3. Data Science 4. Scripting 5. And many more\n\n\nWhat is the latest version of Python?\n\nPython 3 is the latest version of Python\nThis tutorial is based on the standards of Python 3",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#installing-python",
    "href": "4.Python/01_basics.html#installing-python",
    "title": "DATAIDEA",
    "section": "Installing Python",
    "text": "Installing Python\nBefore you can run Python on your PC, you need to install it first.\nTo install Python in a PC, go to https://www.python.org/downloads/ then download the latest version.\nAfter that, install it just like how you install other apps.\nMake sure that you check “Add Python to PATH” for easier installation.",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#writing-python-code",
    "href": "4.Python/01_basics.html#writing-python-code",
    "title": "DATAIDEA",
    "section": "Writing Python Code",
    "text": "Writing Python Code\nIn order to learn Python, you need to be able to write and execute code.\n\nPython Console (Shell)\nPython console also known as shell allows you to execute Python code line by line\nAssuming that you have already installed Python on your PC, you can access the Python console by opening the command prompt and typing python\nLet’s start using the console\nType the following and hit enter\nname = 'Juma Shafara'\nAgain, type the following and hit enter\nprint(name)\nAfter that, you should see this\nJuma Shafara\n\n\nPython Files\nPython files are saved with .py file extension\nYou can use any text editor (even notepad) to create Python files\nJust make sure that you save them with the .py extension, forexample hello.py.\nCopy this code and save it as hello.py:\nprint('Hello World!')\nTo run this Python file on a PC, navigate to the folder where is is located using the command prompt.\nThen type the following and hit enter\npython hello.py\nThe console should then output:\nHello World!\n\n\n\nPython Console",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#python-displaying-output",
    "href": "4.Python/01_basics.html#python-displaying-output",
    "title": "DATAIDEA",
    "section": "Python Displaying output",
    "text": "Python Displaying output\n\n\nTo display an output in Python, use the print() function.\n\nprint('Hello world!')\n\nHello world!\n\n\n\nprint(27)\n\n27\n\n\n\nprint(3 + 27)\n\n30",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#printing-two-objects",
    "href": "4.Python/01_basics.html#printing-two-objects",
    "title": "DATAIDEA",
    "section": "Printing two objects",
    "text": "Printing two objects\nThe print() function can be used to print two objects. Eg.\n\nprint('Hello', 'Juma')\n\nHello Juma\n\n\n\nx = 3\ny = 7\nsumm = x + y\nprint('the sum is ', summ)\n\nthe sum is  10\n\n\n\nx = 4; y = 3; print(x + y)\n\n7",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#python-statements",
    "href": "4.Python/01_basics.html#python-statements",
    "title": "DATAIDEA",
    "section": "Python Statements",
    "text": "Python Statements\nA python statement is used to write a value, compute a value, assign a value to a variable, call a functino and many more. Eg.\n\nx = 5\ny = 3\nsumm = x + y\nprint(summ)\n\n8\n\n\nIn the example above, we have 4 lines of code. In python, each line typically contains one statement\n\nMultiple statements in one line\nYou can also write multiple statements in a single of code. Simply separate the statements with semicolons ;\n\na = 4; b = 3; sum = a + b; print(sum)\n\n7",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#python-syntax",
    "href": "4.Python/01_basics.html#python-syntax",
    "title": "DATAIDEA",
    "section": "Python Syntax",
    "text": "Python Syntax\nWhen coding in Python, we follow a syntax. Syntax is the set of rules followed when writing programs\n\nPython indentation\n\nIn python, indentation indicates a block(group) of statements\nTabs or leading whitespaces are used to compute the indentation level of a line\nIt depends on you whether you want to use tabs or whitespaces, in the example below, we use 2 whitespaces\n\n\nnumber1 = 4\nnumber2 = 3\n\nif number1 &gt; number2:\n  x = 'Hello, world'\n  print(x)\n\nHello, world",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#python-comments",
    "href": "4.Python/01_basics.html#python-comments",
    "title": "DATAIDEA",
    "section": "Python Comments",
    "text": "Python Comments\n\nComments in Python are used to clarify or explain codes\nComments are not interpreted by Python, meaning comments will not be executed\n\n\n# this is a comment\nx = 4 \ny = 3\n\n# some comment\n# second comment\n# third comment\n\nprint(x + y) # prints out the sum\n\n7",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/01_basics.html#end-of-first-module",
    "href": "4.Python/01_basics.html#end-of-first-module",
    "title": "DATAIDEA",
    "section": "End of first module",
    "text": "End of first module\nThe nice introduction ends here, in the next section, we will look at variables in Python\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Basics"
    ]
  },
  {
    "objectID": "4.Python/06_flow_control.html",
    "href": "4.Python/06_flow_control.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Flow Control"
    ]
  },
  {
    "objectID": "4.Python/06_flow_control.html#flow-control",
    "href": "4.Python/06_flow_control.html#flow-control",
    "title": "DATAIDEA",
    "section": "Flow Control",
    "text": "Flow Control",
    "crumbs": [
      "Home",
      "4.Python",
      "Flow Control"
    ]
  },
  {
    "objectID": "4.Python/06_flow_control.html#functions",
    "href": "4.Python/06_flow_control.html#functions",
    "title": "DATAIDEA",
    "section": "Functions",
    "text": "Functions\nA function in python is a group statements that perform a particular task\n\n \n\n\n# This function calculates Body Mass Index\ndef calculateBodyMassIndex(weight_kg, height_m):\n\n    body_mass_index = weight_kg / pow(height_m, 2)\n    rounded_bmi = round(body_mass_index, 2)\n\n    return rounded_bmi\n\n\n# lets try\ncalculateBodyMassIndex(67, 1.6)\n\n26.17\n\n\n\nCreating a function\nTo create a function, we need the following: - The def keyword - A function name - Round brackets () and a colon : - A function body- a group of statements\n\ndef greeter():\n    message = 'Hello'\n    print(message)\n\n\nTo execute a function, it needs to be called\nTo call a function, use its function name with parentheses ()\n\n\ngreeter()\n\nHello\n\n\n\n\nFunction Parameters/Arguments\n\nWhen calling a function, we can pass data using parameters/arguments\nA parameter is a variable declared in the function. In the example below, number1 and number2 are parameter\nThe argument is the value passed to the function when its called. In the example below 3 and 27 are the arguments\n\n\n# define the function\ndef addNumbers(number1, number2):\n    sum = number1 + number2\n    print(sum)\n\n# Call the function\naddNumbers(3, 27)\n\n30\n\n\n\n# setting a default argument\ndef greet(name='you'):\n    message = 'Hello ' + name\n    print(message)\n\ngreet('Tinye')\ngreet()\n\nHello Tinye\nHello you\n\n\n\n\nReturn Statement\nThe return statement is used to return a value to a function caller\n\ndef addNumbers(number1, number2):\n    sum = number1 + number2\n    return sum\n\nsummation = addNumbers(56, 4)\nprint(summation)\n\n60\n\n\n### lambda functions - Lambda functions are functions that donot have names - The body of a lambda function can only have one expression, but can have multiple arguments - The result of the expression is automatically returned\nSyntax: python   lambda parameters: expression\n\n# Example of lambda function\ncalculateBMI = lambda weight_kg, height_m: round((weight_kg/(height_m ** 2)), 2)\n# Calling a labda function\ncalculateBMI(67, 1.7)\n\n23.18\n\n\n\n\nPractice functions\n\nCalculate CGPA\n\n# Assume 4 course units\n# 1. Math - A\n# 2. Science - B\n# 3. SST - B\n# 4. English - C\n\n\ndef calculate_CGPA(GPs_list, CUs_list):\n    length = len(GPs_list)\n    product_sum = 0\n\n    for item in range(length):\n        product_sum += GPs_list[item] * CUs_list[item]\n\n    CUs_sum = sum(CUs_list)\n\n    CGPA = product_sum / CUs_sum\n\n    return CGPA\n\n# calculate_CGPA(4, 5)\n\n\n\nGet someones age given birth month and year\n\ndef getAge(month, year):\n    month_diff = 12 - month\n    year_diff = 2023 - year\n\n    return str(year_diff) + ' years ' + str(month_diff) + ' months'  \n    \nage = getAge(year=2000, month=10) # keyword argument\nage2 = getAge(10, 2000) # positional argument\n\nprint(age)\n\n23 years 2 months\n\n\n[ad]\n\n\n\n\n\n\n\n\nLoops\n\n \n\n\nLoops are used to repetitively execute a group of statements\nwe have 2 types, for and while loop\n\n\nFor Loop\nA for loop is used to loop through or iterate over a sequence or iterable objects\nSyntax:\nfor variable in sequence:\n    statements\n\npets = ['cat', 'dog', 'rabbit']\n# iterate through pets\nfor pet in pets:\n    print(pet)\n\ncat\ndog\nrabbit\n\n\n\n# convert all weights in list from kg to pounds\nweights_kg = [145, 100, 76, 80]\nweights_pds = []\n\nfor weight in weights_kg:\n    pounds = weight * 2.2\n    rounded_pds = round(pounds, 2)\n    weights_pds.append(rounded_pds)\n\nprint(weights_pds)\n\n[319.0, 220.0, 167.2, 176.0]\n\n\n\n# Display all letters in a name\nname = 'Shafara'\n\nfor letter in name:\n    print(letter)\n\nS\nh\na\nf\na\nr\na\n\n\n\n# print 'Hello you' 5 times\nfor step in range(0, 5):\n    print('Hello you')\n\nHello you\nHello you\nHello you\nHello you\nHello you\n\n\n\n\n\nWhile loop\n\nThe while loop executes a given group of statements as long as the given expression is True\n\nSyntax:\nwhile expression:\n    statements\n\ncounter = 0\n\nwhile counter &lt; 5:\n    print('Hello you')\n    counter += 1\n\nHello you\nHello you\nHello you\nHello you\nHello you\n\n\n\n# Convert the weights in the list from kgs to pounds\nweights_kg = [145, 100, 76, 80]\nweights_pds = []\n\ncounter = 0\nend = len(weights_kg)\n\nwhile counter &lt; end:\n\n    pound = weights_kg[counter] * 2.2\n    rounded_pds = round(pound, 3)\n    weights_pds.append(rounded_pds)\n\n    counter += 1\n\nprint(weights_pds)\n\n[319.0, 220.0, 167.2, 176.0]\n\n\n[ad]",
    "crumbs": [
      "Home",
      "4.Python",
      "Flow Control"
    ]
  },
  {
    "objectID": "4.Python/06_flow_control.html#conditional-statements",
    "href": "4.Python/06_flow_control.html#conditional-statements",
    "title": "DATAIDEA",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\n \n\nConditional statements in Python are fundamental building blocks for controlling the flow of a program based on certain conditions. They enable the execution of specific blocks of code when certain conditions are met. The primary conditional statements in Python include if, elif, and else.\n\nBasic Syntax\n\nIf Statement\nThe if statement is used to test a condition. If the condition evaluates to True, the block of code inside the if statement is executed.\nif condition:\n    # block of code\nExample:\nx = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n\n\nElse Statement\nThe else statement is used to execute a block of code if the condition in the if statement evaluates to False.\nif condition:\n    # block of code if condition is True\nelse:\n    # block of code if condition is False\nExample:\nx = 3\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is not greater than 5\")\n\n\nElif Statement\nThe elif (short for else if) statement allows you to check multiple conditions. If the first condition is False, it checks the next elif condition, and so on. If all conditions are False, the else block is executed.\nif condition1:\n    # block of code if condition1 is True\nelif condition2:\n    # block of code if condition2 is True\nelse:\n    # block of code if none of the above conditions are True\nExample:\nx = 7\nif x &gt; 10:\n    print(\"x is greater than 10\")\nelif x &gt; 5:\n    print(\"x is greater than 5 but less than or equal to 10\")\nelse:\n    print(\"x is 5 or less\")\n\n\n\nNested Conditional Statements\nConditional statements can be nested within each other to handle more complex decision-making processes.\nExample:\nx = 15\nif x &gt; 10:\n    if x &gt; 20:\n        print(\"x is greater than 20\")\n    else:\n        print(\"x is greater than 10 but not greater than 20\")\nelse:\n    print(\"x is 10 or less\")\n\n\nConditional Expressions (Ternary Operator)\nPython also supports conditional expressions, which allow for a more concise way to write simple if-else statements.\nvariable = value_if_true if condition else value_if_false\nExample:\nx = 10\nresult = \"greater than 5\" if x &gt; 5 else \"5 or less\"\nprint(result)  # Output: greater than 5\n\n\nCombining Conditions\nMultiple conditions can be combined using logical operators (and, or, not).\nExample:\nx = 8\nif x &gt; 5 and x &lt; 10:\n    print(\"x is between 5 and 10\")\n\n\nPractical Usage\nConditional statements are used in a wide variety of scenarios, such as:\n\nValidating user input.\nControlling the flow of loops.\nImplementing different behaviors in functions or methods.\nHandling exceptions or special cases in data processing.\n\nUnderstanding and effectively using conditional statements are crucial for writing efficient and readable code in Python. They enable developers to build programs that can make decisions and respond dynamically to different inputs and situations.\n[ad]",
    "crumbs": [
      "Home",
      "4.Python",
      "Flow Control"
    ]
  },
  {
    "objectID": "4.Python/09_file_handling.html",
    "href": "4.Python/09_file_handling.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Python File Handling"
    ]
  },
  {
    "objectID": "4.Python/09_file_handling.html#python-file-handling",
    "href": "4.Python/09_file_handling.html#python-file-handling",
    "title": "DATAIDEA",
    "section": "Python File Handling",
    "text": "Python File Handling\nPython allows us to read, write, create and delete files. This process is called file handling.\n\n \n\n\nThe open() function\nThe open() function allows us to read, create and update files\nIt takes 2 parameters:\n\nfile - the file or file path to be opened\nmode - the mode in which a file is opened for\n\nThe mode is a string that can either be any of the following:\n\n\n\nMode\nMeaning\n\n\n\n\n'r'\nOpen a file for reading\n\n\n'w'\nOpen a file for writing, creates the file if it does not exist\n\n\n'a'\nOpen a file for writing, appends to the end of the file\n\n\n'x'\nOpen a file for creating, fails if file already exists",
    "crumbs": [
      "Home",
      "4.Python",
      "Python File Handling"
    ]
  },
  {
    "objectID": "4.Python/09_file_handling.html#python-file-reading",
    "href": "4.Python/09_file_handling.html#python-file-reading",
    "title": "DATAIDEA",
    "section": "Python File reading",
    "text": "Python File reading\nTo better explain this, let us say we have a folder named my_folder.\nInside my_folder we have the following files:\n\ndemo.txt\nmain_code.py\n\nThe content of the demo.txt file is the following\nHello World!\nI love Python\nNow our goal is to read the content of the demo.txt file and then print it using the main_code.py file\nTo achieve this, we will use the open() function with 'r' mode.\n\n# this is main code\n\nfile = open(\n    file='demo.txt',\n    mode='r'\n)\ncontent = file.read()\nprint(content)\n\nHello World!\nI love Python\n\n\n\nReading Lines\nWe can also read each line using the readline() method.\n\n# this is main_code.py\n\nfile = open(\n    file='demo.txt',\n    mode='r'\n)\n\nfirst_line = file.readline()\nsecond_line = file.readline()\n\nprint('First line:', first_line)\nprint('Second line:', second_line)\n\nFirst line: Hello World!\n\nSecond line: I love Python",
    "crumbs": [
      "Home",
      "4.Python",
      "Python File Handling"
    ]
  },
  {
    "objectID": "4.Python/09_file_handling.html#writing-a-file",
    "href": "4.Python/09_file_handling.html#writing-a-file",
    "title": "DATAIDEA",
    "section": "Writing a File",
    "text": "Writing a File\nIn simplest terms, writing a file means modifying the content of a file or creating it if it doesnot exist yet.\nIn Python, there are 2 modes to write to file.\n\n'w' - overwrites content of a file, creates file if it does not exist\n'a' - appends content to the end of a file, creates the file if it does not exist\n\nExample To better explain this, lets say we have a folder named my_folder. Inside my_folder we have the following files\n\ndemo.txt\nmain_code.py\n\nThe content of the demo.txt file is the following\nI love Python\nIn this example, we will use the 'w' mode which will overwrite(replace) the content of the file\n\n# this is main_code.py\n\nfile = open(\n    file='demo.txt',\n    mode='w'\n)\nfile.write('I love JavaScript')\nfile.close()\n\nWhen the above code is run, the content of the file demo.txt will be this:\nI love JavaScript\nAnother example, this time we will use the a mode which will append or add content to the end of the file\n\n# this is main_code.py\n\nfile = open(\n    file='demo.txt',\n    mode='a'\n)\nfile.write(' and JavaScript')\nfile.close()\n\nWhen the above script is run, the content of the demo.txt file will be this:\nI love Python and JavaScript",
    "crumbs": [
      "Home",
      "4.Python",
      "Python File Handling"
    ]
  },
  {
    "objectID": "4.Python/09_file_handling.html#deleting-a-file",
    "href": "4.Python/09_file_handling.html#deleting-a-file",
    "title": "DATAIDEA",
    "section": "Deleting a file",
    "text": "Deleting a file\nTo delete a file, use the os module. The os modules contains the remove() method which we can use to delete files.\n\n# this is main_code.py\n\n# import os\n\n# os.remove('demo.txt')\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Python File Handling"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html",
    "href": "4.Python/00_outline.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#python-course-outline",
    "href": "4.Python/00_outline.html#python-course-outline",
    "title": "DATAIDEA",
    "section": "Python Course Outline",
    "text": "Python Course Outline",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#basics",
    "href": "4.Python/00_outline.html#basics",
    "title": "DATAIDEA",
    "section": "Basics",
    "text": "Basics\n\nPython Overview\nIntroduction\nInstalling\nWriting Code\nDisplaying Output\nStatements\nSyntax\nComments\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#variables",
    "href": "4.Python/00_outline.html#variables",
    "title": "DATAIDEA",
    "section": "Variables",
    "text": "Variables\n\nVariables\nData Types\nNumbers\nNumber Methods\nStrings\nType Conversion\nPython Booleans\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#operations",
    "href": "4.Python/00_outline.html#operations",
    "title": "DATAIDEA",
    "section": "Operations",
    "text": "Operations\n\nOperators Intro\nArithmetics\nAssignment\nComparison\nLogical\nIdentity\nMembership\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#collections",
    "href": "4.Python/00_outline.html#collections",
    "title": "DATAIDEA",
    "section": "Collections",
    "text": "Collections\n\nContainers\nList\nTuple\nSet\nDictionary\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#flow-control",
    "href": "4.Python/00_outline.html#flow-control",
    "title": "DATAIDEA",
    "section": "Flow Control",
    "text": "Flow Control\n\nFunctions\nLambda functions\nIf else\nIf else shorthand\nFor Loop\nWhile Loop\nBreak and Continue\nPass\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#advanced",
    "href": "4.Python/00_outline.html#advanced",
    "title": "DATAIDEA",
    "section": "Advanced",
    "text": "Advanced\n\nClasses and Objects\nInheritance\nVariable Scope\nFormatting Strings\nTry … Except\nIterators\nUser Input\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#modules",
    "href": "4.Python/00_outline.html#modules",
    "title": "DATAIDEA",
    "section": "Modules",
    "text": "Modules\n\nIntro\nMath\nRandom\nDate and Time\nJSON\nRegular Expressions\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "4.Python/00_outline.html#working-with-files",
    "href": "4.Python/00_outline.html#working-with-files",
    "title": "DATAIDEA",
    "section": "Working With Files",
    "text": "Working With Files\n\nFile Handling\nFile Reading\nFile Writing/Creating/Appending\nFile Deleting\nExercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Python Course Outline"
    ]
  },
  {
    "objectID": "3.JavaScript/03_displaying_output.html#displaying-output",
    "href": "3.JavaScript/03_displaying_output.html#displaying-output",
    "title": "DATAIDEA",
    "section": "Displaying Output",
    "text": "Displaying Output\nDisplaying output or generating output in JavaScript is very important expecially when learning the language\nFor example, if you want to see if your JavaScript statements or code blocks are correct, you can output data to check\nIn JavaScript, there are 4 ways of displaying output:\n\nWriting to HTML Elements\nBy using the innerHTML property, we can change the content or text of the selected element.\nWe can use the document.getElementById() function to select an element",
    "crumbs": [
      "Home",
      "3.JavaScript",
      "Displaying Output"
    ]
  },
  {
    "objectID": "3.JavaScript/02_introduction.html#what-is-javascript",
    "href": "3.JavaScript/02_introduction.html#what-is-javascript",
    "title": "DATAIDEA",
    "section": "What is JavaScript?",
    "text": "What is JavaScript?\nJavaScript is a programming or scripting language that allows the implementation of features on the web pages\n\nLooking Back\nTo better understand JavaScript, we can look back at what we already know.\nWe know that HTML elements are the building blocks of web pages\nAnd CSS is used for designing HTML elements.\nJavaScript on the other hand, is what implements the features of web pages.\nWe can simplify this explanation by taking a look at this example:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        /* css */\n        button{\n            font-family: sans-serif;\n            border: none;\n        }\n        #btn {\n            background-color: darkred;\n            color: white;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;Show a Dialog&lt;/button&gt;\n\n    &lt;!-- javascript --&gt;\n    &lt;script&gt;\n        document.getElementById('btn').onclick = function() {\n            alert('I am a dialog box')\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nNote!\n\n\nAs you may notice, this web page contains HTML, CSS and JavaScript\n\n\nIn this example, HTML is used to create the button, then CSS is used to design it. Finally JavaScript is used to add a simple function that shows a dialog box when clicked.\n\n\nWhat can JavaScript do?\nWell, alot! Here are some:\nJavaScript can change the content of HTML elements.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p id=\"demo\"&gt;Hello World!&lt;/p&gt;\n    &lt;button type=\"button\" onclick=\"myFunc()\"&gt;Change Value&lt;/button&gt;\n\n    &lt;!-- javascipt code --&gt;\n    &lt;script&gt;\n        function myFunc() {\n            document.getElementById(\"demo\").innerHTML = \"Hello Everyone!\";\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nJavaScript can change the value of attributes\nIn this example, the value of the src attribute is changed.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"../assets/404.png\" id='image'&gt;\n    &lt;button type=\"button\" onclick=\"muFunc()\"&gt;Change Image&lt;/button&gt;\n\n    &lt;!-- javascript --&gt;\n    &lt;script&gt;\n        function muFunc() {\n            document.getElementById('image').src = \"../assets/banner.png\"\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Home",
      "3.JavaScript",
      "What is JavaScript?"
    ]
  },
  {
    "objectID": "3.JavaScript/00_outline.html#javascript-course-outline",
    "href": "3.JavaScript/00_outline.html#javascript-course-outline",
    "title": "DATAIDEA",
    "section": "JavaScript Course Outline",
    "text": "JavaScript Course Outline\n\nBasics\n\nOverview\nIntroduction\nWriting Code\nDisplaying Output\nStatements\nSyntax\nComments\nVariables\nFunctions\nEvents\n\n\n\nData Types\n\nString\nNumber\nBoolean\nObject\nArray\nUndefined\nNull\nDynamic\n\n\n\nOperators\n\nOperators\nArithmetic\nAssignment\nComparison\nLogical and Conditional\nBitwise Operators\n\n\n\nFlow Control\n\nThe if...else statement\nThe switch statement\nFor Loop\nWhile Loop\nBreak and Continue\nTimeout and Interval\nException Handling\n\n\n\nAdvanced\n\nVariable Scope\nVariable Hoisting\nStrict Mode\nlet\nconst\nDates\nDate Formats\nDate Get Methods\nDate Set Methods\nthis Keyword\nArrow Function\nClasses\nJSON\nForms\nForm Inputs\nReserved Keywords\nFunction Invocation\nRegular Expressions\n\n\n\nHTML DOM\n\nIntroduction\nSelectors\nNodes\nNavigation\nHTML\nCSS or Styling\nEffects\nEvents\n\n\n\nBOM\n\nWindow\nScreen\nLocation\nHistory\nNavigator\nPop-up Boxes\nCookies\n\n\n\nJAX\n\nIntroduction\nXMLHttpsRequest\nSend Request\nRecieve Response\n\n\n\nDon’t miss out on any updates and developments! Subscribe to the DATAIDEA Newsletter it’s easy and safe.",
    "crumbs": [
      "Home",
      "3.JavaScript",
      "JavaScript Course Outline"
    ]
  },
  {
    "objectID": "3.JavaScript/01_overview.html#overview",
    "href": "3.JavaScript/01_overview.html#overview",
    "title": "DATAIDEA",
    "section": "Overview",
    "text": "Overview\nThis course will teach you the basic and advanced concepts of JavaScript\n\nJavaScript Prerequisites\nWhat do you need before learning JavaScript?\nIn order to learn JavaScript, you need to have:\n\nComputer Literacy\nBasic understanding of HTML\nBasic understanding of CSS\n\n\n\nNote!\n\n\nJavaScript is easy to learn! Although you may struggle at first, you can reread the lessons and retry coding the given examples\n\n\n\n\nDon’t miss out on any updates and developments! Subscribe to the DATAIDEA Newsletter it’s easy and safe.",
    "crumbs": [
      "Home",
      "3.JavaScript",
      "Overview"
    ]
  },
  {
    "objectID": "4.Python/02_variables.html",
    "href": "4.Python/02_variables.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Variables"
    ]
  },
  {
    "objectID": "4.Python/02_variables.html#variables",
    "href": "4.Python/02_variables.html#variables",
    "title": "DATAIDEA",
    "section": "Variables",
    "text": "Variables\n\n \n\n\nVaribles are used to store values.\nTo create a variable, use the equal sign (=).\n\nIn the examples below, we create varibales name fruit and name and we assign them values 'mango' and 'viola' respectively\n\nfruit = 'mango'\nname = 'voila'\n\n# printing out\nprint(name, ' likes ', fruit )\n\nvoila  likes  mango\n\n\n\nRules to consider\n\nSpaces are not allowed eg\nCan not start with number eg\nCan not have special characters eg\nAre case sensitive\n\nExamples of good variable names\n\nmy_favorite_character = 'Stewie Griffin' # snake case\nmyFavoriteCharacter = 'Meg Griffin' # camel case\nMyFavoriteCharacter = 'Brian Griffin' # Pascal case",
    "crumbs": [
      "Home",
      "4.Python",
      "Variables"
    ]
  },
  {
    "objectID": "4.Python/02_variables.html#data-types",
    "href": "4.Python/02_variables.html#data-types",
    "title": "DATAIDEA",
    "section": "Data Types",
    "text": "Data Types\nIn this section of the tutorial, you will learn the most basic data types in Python\n\nNumbers\nThese are two basic types of numbers and they are called: - integer(numbers without decimal places) - floating point numbers(numbers with decimal places)\n\n# python numbers\n# Integers\nage = 45\npopulation = 45000000\n\n\n# Floating point numbers\nheight = 1.7\nweight = 147.45",
    "crumbs": [
      "Home",
      "4.Python",
      "Variables"
    ]
  },
  {
    "objectID": "4.Python/02_variables.html#strings",
    "href": "4.Python/02_variables.html#strings",
    "title": "DATAIDEA",
    "section": "Strings",
    "text": "Strings\nStrings are simply text. A string must be surrounded by single or double quotes\n\n# Strings\nname = 'Juma'\nother_name = \"Masaba Calvin\"\nstatement = 'I love coding'\n\n\nSingle or double quotes?\nUse single quotes when your string contains double quotes, or the vice versa.\n\n# when to use which quotes\nreport = 'He said, \"I will not go home\"'\n\n\n\nString Methods\n\ntext = 'shafara VEe'\ncapitalized_text = text.capitalize()\nprint('Capitalized:', capitalized_text)\n\nupper_text = text.upper()\nprint('Upper text', upper_text)\n\nlower_text = text.lower()\nprint('Lower case text:', lower_text)\n\ncorrected_text = text.replace('VEe', 'Viola')\nprint(corrected_text)\n\nprint('shafara' not in text)\n\n\n\nBooleans\nBoolean data type can onlyhave on fo these values: True or False\n\n# Boolean\nmarried = True\nprint(married)\n\nTrue\n\n\n\n\nLists\n\nA list is an ordered collection of data\nIt can contain strings, numbers or even other lists\nLists are written with square brackets ([])\nThe values in lists (also called elements) are separated by commas (,)\n\n\n# Lists\nnames = ['juma', 'john', 'calvin']\nother_stuff = ['mango', True, 38]\n\nprint(names)\nprint(other_stuff)\n\n['juma', 'john', 'calvin']\n['mango', True, 38]\n\n\n\n\nChecking data types\nTo check the data type of an object in python, use type(object), for example, below we get the data type of the object stored in names\n\n# Which data type\ntype(names)\n\nlist",
    "crumbs": [
      "Home",
      "4.Python",
      "Variables"
    ]
  },
  {
    "objectID": "4.Python/02_variables.html#converting-types",
    "href": "4.Python/02_variables.html#converting-types",
    "title": "DATAIDEA",
    "section": "Converting Types",
    "text": "Converting Types\n\n# convert an integer to a string\nage = 45\nmessage = 'Peter Griffin is '+ str(age) + ' years old'\n\n# Convert floating point to integer\npi = 3.14159\nprint(int(pi))\n\n3\n\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Variables"
    ]
  },
  {
    "objectID": "4.Python/miscellaneous_exerise.html",
    "href": "4.Python/miscellaneous_exerise.html",
    "title": "Miscellaneous Exercise [+ Solutions]",
    "section": "",
    "text": "Reverse a String: Write a function that takes a string as input and returns the reverse of that string.\n\n\n#Qn.1 reverse a string\ndef reverseString (text):\n    return text[::-1]\nreverseString ('hello world')\n\n'dlrow olleh'\n\n\n\nPalindrome Checker: Write a function that takes a string as input and returns True if it’s a palindrome (reads the same forwards and backwards), False otherwise.\n\n\n#Qn.2 Palindrome Checker\ndef isPalindrome (text):\n    return text == text[::-1]\nisPalindrome('madam')\n\nTrue\n\n\n\nFactorial Calculator: Write a function that calculates the factorial of a given number. The factorial of a non-negative integer is the product of all positive integers less than or equal to the integer.\n\n\n#Qn.3 Factorial Calculator\ndef numberFactorial(number):\n    if number==0 or number==1:\n        print(1)\n    else:\n        factorial = 1\n        for value in range (1, number+1):\n            factorial *= value\n        print(factorial)\nnumberFactorial(6)\n\n720\n\n\n\nFibonacci Sequence: Write a function to generate the Fibonacci sequence up to a certain number of terms. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.\n\n\n#Qn.4 Fibonacci Sequence\ndef fibonacciSequence (number):\n    sequence = [0,1]\n    while len (sequence)&lt; number:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\nfibonacciSequence (8)\n\n[0, 1, 1, 2, 3, 5, 8, 13]\n\n\n\nPrime Number Checker: Write a function that checks if a given number is prime.\n\n\n#Qn.5 Prime Number Checker\ndef isPrimeNumber (number):\n    if number &lt;= 1:\n        return False\n    for value in range(2,int(number**0.5)+1):\n        if number % value == 0:\n            return False\n    return True\nisPrimeNumber(4)\n\nFalse\n\n\n[ad]\n\n\n\n\n\n\nList Reversal: Write a function that reverses a list.\n\n\n#Qn.6 List Reversal\ndef reverseList(list_):\n    return list_[::-1]\nreverseList([1,3,5,6,8])\n\n[8, 6, 5, 3, 1]\n\n\n\nList Sorting: Write a function that sorts a list of integers in ascending order without using Python’s built-in sorting functions.\n\n\n#Qn.7 List Sorting\ndef sortList(list_):\n    return sorted(list_)\nsortList([3,7,1,9,2])\n\n[1, 2, 3, 7, 9]\n\n\n\nAnagram Checker: Write a function that takes two strings as input and returns True if they are anagrams (contain the same letters with the same frequency), False otherwise.\n\n\n#Qn.8 Anagram Checker\ndef areAnagram(string1, string2):\n    return sorted(string1) == sorted(string2)\nareAnagram('listen','silent')\n\nTrue\n\n\n\nCount Words in a String: Write a function that takes a string as input and returns the count of words in that string.\n\n\n#Qn.9 Count words in a String\ndef countWords(string):\n    return len(string.split())\ncountWords('hello world')\n\n2\n\n\n\nUnique Elements: Write a function that takes a list and returns a new list with only the unique elements from the original list.\n\n\n#Qn.10 Unique Elements\ndef uniqueElements(list_):\n    return list(set(list_))\nuniqueElements([2,4,3,2,6,4,7,9,5,3,5,1,6])\n\n[1, 2, 3, 4, 5, 6, 7, 9]\n\n\n[ad]\n\n\n\n\n\nWant to Become a Python Expert?\nIf you’re committed to mastering Python for Data Science and Web Development roles, I strongly recommend enrolling in my Complete Python 3 Course. Avoid wasting time on outdated, disjointed tutorials.\nMy Complete Python 3 Course has everything you need in one place.\n\nAbout 10 hours of HD video\nUnlimited access - watch it as many times as you want\nSelf-paced learning - take your time if you prefer\nWatch it online or download and watch it offline\nOne-on-one training with me 2-4 times a week\n\nSincerely,\nJuma Shafara\nData Scientist, Instructor\nDATAIDEA\n[ad]\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "4.Python",
      "Miscellaneous Exercise [+ Solutions]"
    ]
  },
  {
    "objectID": "4.Python/10_exercise.html",
    "href": "4.Python/10_exercise.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Exercise"
    ]
  },
  {
    "objectID": "4.Python/10_exercise.html#exercise",
    "href": "4.Python/10_exercise.html#exercise",
    "title": "DATAIDEA",
    "section": "Exercise",
    "text": "Exercise",
    "crumbs": [
      "Home",
      "4.Python",
      "Exercise"
    ]
  },
  {
    "objectID": "4.Python/10_exercise.html#homework",
    "href": "4.Python/10_exercise.html#homework",
    "title": "DATAIDEA",
    "section": "Homework",
    "text": "Homework\n\nTheory\nPython Overview:\nWhat are the fundamental components of a Python program, and how does Python execute code?\nPython Variables:\nExplain the differences between mutable and immutable data types in Python and provide examples of each.\nPython Operations:\nDiscuss the importance of operator precedence in Python and how it impacts the evaluation of expressions.\nPython Collections:\nCompare and contrast the usage of lists, tuples, sets, and dictionaries in Python, highlighting their key characteristics and when to use each.\n\n\nPractical\nProblem: Pizza Party\nYou’re organizing a pizza party and want to ensure there’s enough pizza for everyone attending. Each pizza has 8 slices. Write a Python script that calculates the number of pizzas needed based on the number of guests and slices per person.\nConsider the following inputs:\n\nNumber of guests attending the party.\nSlices each guest should have (assume each guest will have the same number of slices).\n\nYour script should:\n\nPrompt the user for the number of guests attending.\nPrompt for the number of slices each guest should have.\nCalculate the total number of slices needed.\nCalculate the total number of pizzas required (round up to the nearest whole pizza).\nFor instance, if 10 guests are attending and each should have 3 slices, your program should output the number of pizzas needed to fulfill the requirement.\n\n\n# Solution\nnumber_of_guests = 10\nnumber_of_slices_for_each = 3\n\ntotal_number_of_slices = number_of_guests * number_of_slices_for_each\ntotal_number_of_pizzas = total_number_of_slices / 8\n\nprint('Number of pizzas needed for ' + \n      str(number_of_guests) + ' is ' + \n      str(total_number_of_pizzas))\n\nNumber of pizzas needed for 10 is 3.75\n\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Exercise"
    ]
  },
  {
    "objectID": "4.Python/08_modules.html",
    "href": "4.Python/08_modules.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Modules"
    ]
  },
  {
    "objectID": "4.Python/08_modules.html#modules",
    "href": "4.Python/08_modules.html#modules",
    "title": "DATAIDEA",
    "section": "Modules",
    "text": "Modules\nA module in Python is a python file that can contain variables, functions and classes\n\nWhy use Modules?\nModules allow us to split our code into multiple files\nInstead of writing all our codes inside a sigle Python file, we can use modules\n\nTip! That way, our code will be easier to read, understand and maintain\n\n\n\nCreating a Module\nThere is nothing so special with creating a module, simply write you Python code and save it with the .py extension.\nIn this example, we have a module saved as my_module.py and it contains the following code\n\n# this is my_module.py\n\nfirst_name = 'Viola'\nlast_name = 'Akullu'\n\ndef add(number1, number2):\n    return number1 + number2\n\ndef multiply(number1, number2):\n    return number1 * number2\n\nAfter that, to use my_module.py, we need to import it.\nTo import, use the import statement and the module name.\nThen we can use the variables and functions in the module.\nIn this example, the code below is saved as main_code.py and it imports the module.py.\n\n# this is main_code.py\n\nimport my_module\n\nfull_name = my_module.first_name + my_module.last_name\nprint('Full name:', full_name)\n\nsummation = my_module.add(3, 7)\nprint('Summation:', summation)\n\nFull name: ViolaAkullu\nSummation: 10\n\n\n\n\nUsing Aliases\nWe can use an alias to refer to the module\nTo use an alias, use the as keyword\n\n# this is main_code.py\n\nimport my_module as mm\n\nfull_name = mm.first_name + mm.last_name\nprint('Full name:', full_name)\n\nsummation = mm.add(3, 7)\nprint('Summation:', summation)\n\nFull name: ViolaAkullu\nSummation: 10\n\n\n\n\nImporting Parts of a Module\nWe can choose to import only some specific parts of a module\n\nNote! When we import a part of a module, we will be able to use its variables and functions directly\n\nUse the from keyword to import a part of a module.\nIn this example, we will import the first_name variable and access it directly\n\nfrom my_module import first_name\n\n# now we can use it directly as \nprint(first_name)\n\nViola\n\n\n\n\nThe dir() Function\nThe dir() function returns a list of all the variables, functions and classes available in a module\n\nimport my_module\n\ndir_ = dir(my_module)\n\nprint(dir_)\n\n['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'add', 'first_name', 'last_name', 'multiply']\n\n\n\n\nBuilt in Modules\nPython has many useful built-in modules that we can use to make coding easier.\nBuilt-in modules can be imported without having to create them\nIn this example, we will import the sysconfig module and use its get_python_version() to return the Python version we’re using\n\nimport sysconfig\n\npython_version = sysconfig.get_python_version()\nprint(python_version)\n\n3.10",
    "crumbs": [
      "Home",
      "4.Python",
      "Modules"
    ]
  },
  {
    "objectID": "4.Python/08_modules.html#math-module",
    "href": "4.Python/08_modules.html#math-module",
    "title": "DATAIDEA",
    "section": "Math Module",
    "text": "Math Module\nThe math module gives us access to mathematical functions\nTo use the math module, import it first, then we can start using it.\nWe can use the math module to find the square root of a number using the math.sqrt() method\n\nimport math\n\nnumber = 16\nnumber_sqrt = math.sqrt(number)\n\nprint('Number:', number)\nprint('Square root of number:', number_sqrt)\n\nNumber: 16\nSquare root of number: 4.0\n\n\nWe can use the math module to get the factorial of a number by using the math.factorial() method\n\nimport math\n\nnumber = 5\nnumber_factorial = math.factorial(number)\n\nprint('Number:', number)\nprint('Factorial:', number_factorial)\n\nNumber: 5\nFactorial: 120\n\n\nThe math module also contains some constants like pi and e\n\nimport math\n\nprint('e:', math.e)\nprint('pi:', math.pi)\n\ne: 2.718281828459045\npi: 3.141592653589793\n\n\nThe math module can do those and so much more",
    "crumbs": [
      "Home",
      "4.Python",
      "Modules"
    ]
  },
  {
    "objectID": "4.Python/08_modules.html#random-module",
    "href": "4.Python/08_modules.html#random-module",
    "title": "DATAIDEA",
    "section": "Random Module",
    "text": "Random Module\nThe random module lets us generate a random number\nAs usual, to use the random module, import it first.\nWe can generate a random number that falls within a specified range by using the random.randint() method\n\nimport random\n\nrandom_integer = random.randint(1,100)\nprint('Random Integer:', random_integer)\n\nRandom Integer: 4\n\n\nWe can generate numbers from a gaussian distribution with mean (mu) as 0 and standard deviation (sigma) as 1\n\nnumbers = []\n\ncounter = 0\nwhile counter &lt; 100:\n    numbers.append(random.gauss(mu=0, sigma=1))\n    counter += 1\n    \nprint(numbers)\n\n[0.8310128735410047, 2.402375340413018, -1.2769617295659348, 0.7569506717477539, 1.6026026122392498, 1.4142936594217554, -0.3169917649104485, -0.07305941097531603, -0.7885301448554015, -0.0674611332298377, 0.28288857512573684, 0.08844216926370602, -1.249987094506388, 0.870793290313952, -0.6607737394803138, 0.3780605189691181, 0.20288623881856632, 0.8439702923769746, 1.6500270929422152, -0.5579247768953991, -0.3076290349937902, 0.8927675985413197, -2.3716599434459114, 0.23253728473684382, 0.01698634011714592, -1.506684284668113, -1.516156046117149, -0.7549199652372819, 0.4855840249497611, -1.9426218553454226, -0.5672748318805165, 1.7849639815888045, -0.4223703532919884, -1.4182523392919628, 0.3817982448773813, -1.2151583559744263, 0.21736913499460964, 0.0743448686041854, -0.6217874541247053, -0.05369712902089164, 0.06560332100098984, 0.5791279113149166, 1.5329264216964942, -1.5523813284095307, 0.256018716284597, 1.498941708596562, 0.6484203278916434, 0.956658998431066, -0.7469607705965761, 0.9093585267915438, -0.3301676177291813, -2.1020486475752564, -0.6324768823835674, -0.2621489739923403, 0.36805271395009337, -0.1987104858441708, -0.20226660046300027, -1.0227302328088852, 0.9440428943259802, 1.3499647213634605, 0.28655811659281705, -0.48212404896946465, 1.5732404576352244, 1.7024230857294205, -0.32802550098029193, 2.0808443667109597, 2.2783854541239874, -0.265626754707208, -0.04641950638081212, 0.7941371582079103, -0.36860553191079254, -0.9098450679735101, 1.234946260813307, -2.835066105841072, 1.3883254119625694, 1.2853299658795028, 1.178005875662903, 0.3186472037221876, -1.0006920744966419, -2.3745959188263885, 1.8440465299894964, -0.35610549619690796, 0.5857012223823791, 0.7400382246661824, 0.07225122970263118, -0.5508995490344698, -0.038356750477046286, -0.040997463659922434, 0.6802546773316889, -1.3861271290488735, 0.7275261286416534, 0.3729374034245036, -0.013616473457934613, -0.7620103036607296, 0.15556952852877587, -1.7898533901375224, -1.137248630020012, -1.71518120153122, -0.5817297506694047, -0.4035542913039588]",
    "crumbs": [
      "Home",
      "4.Python",
      "Modules"
    ]
  },
  {
    "objectID": "4.Python/08_modules.html#date-and-time",
    "href": "4.Python/08_modules.html#date-and-time",
    "title": "DATAIDEA",
    "section": "Date and Time",
    "text": "Date and Time\nThe datetime module allows us to work with dates\nAs usual we have to import the datetime module to be able to use it.\n\nCurrent Date and Time\nThe datetime.datetime.now() method returns the current date and time\n\nimport datetime\n\ntime_now = datetime.datetime.now()\nprint(time_now)\n\n2024-05-01 08:18:09.070054\n\n\n\n\nThe date Object\nThe date object represents a date (year, month and day)\nTo create a date object, import it from the datetime module first.\n\nfrom datetime import date\n\ntoday = date.today()\nprint('Current date:', today)\n\nCurrent date: 2024-05-01",
    "crumbs": [
      "Home",
      "4.Python",
      "Modules"
    ]
  },
  {
    "objectID": "4.Python/08_modules.html#json",
    "href": "4.Python/08_modules.html#json",
    "title": "DATAIDEA",
    "section": "JSON",
    "text": "JSON\nJSON stands for JavaScript Object Notation.\nJSON contains data that are sent or received to and from a server\nJSON is simply a string, if follows a format similar to a Python dictionary\nExample:\n\ndata = \"{'first_name': 'Juma','last_name': 'Shafara', 'age': 39}\"\n\nprint(data)\n\n{'first_name': 'Juma','last_name': 'Shafara', 'age': 39}\n\n\n\nJSON to Dictionary\nBefore we can individually access the data of a JSON, we need to convert it to a Python dictionary first.\nTo do that, we need to import the json module\n\nimport json \n\ndata = '{\"first_name\": \"Juma\",\"last_name\": \"Shafara\", \"age\": 39}'\n\n# convert to dictionary\ndata_dict = json.loads(data)\n\nprint('Fist name:',data_dict['first_name'])\nprint('Last name:', data_dict['last_name'])\nprint('Age:', data_dict['age'])\n\nFist name: Juma\nLast name: Shafara\nAge: 39\n\n\n\n\nDictionary to JSON\nTo convert a dictionay to JSON, use the json.dumps() method.\n\nimport json\n\ndata_dict = {\n    \"first_name\": \"Juma\",\n    \"last_name\": \"Shafara\", \n    \"age\": 39\n    }\n\ndata_json = json.dumps(data_dict)\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Modules"
    ]
  },
  {
    "objectID": "4.Python/05_containers.html",
    "href": "4.Python/05_containers.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Containers"
    ]
  },
  {
    "objectID": "4.Python/05_containers.html#containers",
    "href": "4.Python/05_containers.html#containers",
    "title": "DATAIDEA",
    "section": "Containers",
    "text": "Containers\nContainers are objects that contain other objects\n\nWhat is an object?\nIn python, everything is an object. Even the simplest strings and numbers are considered as objects",
    "crumbs": [
      "Home",
      "4.Python",
      "Containers"
    ]
  },
  {
    "objectID": "4.Python/05_containers.html#lists",
    "href": "4.Python/05_containers.html#lists",
    "title": "DATAIDEA",
    "section": "Lists",
    "text": "Lists\n\n \n\n\nA python list is an ordered container\nA list is created by using square brackets ([])\nObjects are poaced inside those brackets and are separated by commas (,)\n\n\npets = ['dog', 'cat', 'rabbit', 'monkey']\nprint(pets)\nprint(type(pets))\n\n['dog', 'cat', 'rabbit', 'monkey']\n&lt;class 'list'&gt;\n\n\n\nIndexing\n\nIndexing is used to access items of a list\nIndexing uses square brackets and numbers to access individual items of a list\nWhere 0 refers to the first item, 1 refers to the second item, and so on\n\n\n# indexing\nprint(pets[2])\n\nrabbit\n\n\n\n#range of indexes\nprint(pets[1:3])\n\n['cat', 'rabbit']\n\n\n\n\nAdding items to a list\n\npets = ['dog', 'cat', 'rabbit', 'monkey']\npets.append('hamster')\nprint(pets)\n\n['dog', 'cat', 'rabbit', 'monkey', 'hamster']\n\n\n\npets = ['dog', 'cat', 'rabbit', 'monkey']\npets.insert(1, 'hamster')\nprint(pets)\n\n['dog', 'hamster', 'cat', 'rabbit', 'monkey']\n\n\n\n\nDeleting Items from a list\n\npets = ['dog', 'cat', 'rabbit', 'monkey']\npets.pop()\nprint(pets)\n\n['dog', 'cat', 'rabbit']\n\n\n\npets = ['dog', 'cat', 'rabbit', 'monkey']\npets.remove('rabbit')\nprint(pets)\n\n['dog', 'cat', 'monkey']\n\n\n\npets = ['dog', 'cat', 'rabbit', 'monkey']\ndel pets [2]\nprint(pets)\n\n['dog', 'cat', 'monkey']\n\n\n\n\nGetting the length of a list\nThe length of a list refers to the number of items in a list, use the len() method\n\n\nHomework\n\nCheck if an item exist\n\n\n\nExtending a list\nThe extend() methods adds all items from one list to another\n\npets = ['dog', 'cat']\nother_pets = ['rabbit', 'monkey']\npets.extend(other_pets)\nprint(pets)\n\n['dog', 'cat', 'rabbit', 'monkey']",
    "crumbs": [
      "Home",
      "4.Python",
      "Containers"
    ]
  },
  {
    "objectID": "4.Python/05_containers.html#tuple",
    "href": "4.Python/05_containers.html#tuple",
    "title": "DATAIDEA",
    "section": "Tuple",
    "text": "Tuple\n\nPython tuple is an ordered container\nIts the same as a list but the items of tuples cannot be changed\nWe create a tuple using round brackets ()\n\n\npets = ('dog', 'cat', 'rabbit')\nprint(pets)\nprint(type(pets))\n\n('dog', 'cat', 'rabbit')\n&lt;class 'tuple'&gt;",
    "crumbs": [
      "Home",
      "4.Python",
      "Containers"
    ]
  },
  {
    "objectID": "4.Python/05_containers.html#sets",
    "href": "4.Python/05_containers.html#sets",
    "title": "DATAIDEA",
    "section": "Sets",
    "text": "Sets\n\n \n\n\nA set is a container/collection that is unordered and immutable\nWe create a set using {}\n\n\npets = {'dog', 'cat', 'rabbit'}\nprint(pets)\n\n{'rabbit', 'dog', 'cat'}\n\n\n\n# A set can contain objects of different data types\nmixed = {'dog', 21, True}\nprint(mixed)\nprint(type(mixed))\n\n{True, 'dog', 21}\n&lt;class 'set'&gt;\n\n\n\nAccessing set elements\n\nUnlike lists and tuples, you cannot access the items in a set using indexes\nThis is because a set is unordered and not indexed\nHowever, we can use a for loop to access all its items one-by-one\n\nNote: We’ll discuss a for loop in the next chapter\n\n# Accessing\npets = {'dog', 'cat', 'rabbit'}\nfor pet in pets:\n    print(pet)\n\nrabbit\ndog\ncat\n\n\n\n\nAdding elements to a set\n\n# Adding items to a set\npets = {'dog', 'cat', 'rabbit'}\npets.add('fish')\nprint(pets)\n\n{'rabbit', 'dog', 'cat', 'fish'}\n\n\n\n\nRemoving set elements\n\n# Removing items from a set\npets = {'dog', 'cat', 'rabbit'}\npets.remove('cat') # remove\nprint(pets)\n\n{'rabbit', 'dog'}\n\n\n\npets = {'dog', 'cat', 'rabbit'}\npets.discard('rabbit') #discard\nprint(pets)\n\n{'dog', 'cat'}\n\n\n\npets = {'dog', 'cat', 'rabbit'}\npets.pop() # pop removes the last item from the set\nprint(pets)\n\n{'dog', 'cat'}\n\n\n\n\nHomework\n\nFind the length of a set\nCheck if an element exists\nCombine sets\n\n\n\nGetting the difference between sets\n\n# Getting the difference\nfirst_numbers = {1, 2, 3, 4}\nsecond_numbers = {3, 4, 5, 6}\n\ndifference = first_numbers - second_numbers\n# another way\ndifference2 = first_numbers.difference(second_numbers)\nprint(difference)\n\n{1, 2}",
    "crumbs": [
      "Home",
      "4.Python",
      "Containers"
    ]
  },
  {
    "objectID": "4.Python/05_containers.html#dictionaries",
    "href": "4.Python/05_containers.html#dictionaries",
    "title": "DATAIDEA",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary is an unordered and mutable colletion of items\n\n \n\n\n# Creating \nperson = {\n    'first_name': 'Voila', \n    'last_name': 'Akullu',\n    'age': 16\n    }\nprint(person)\n\n{'first_name': 'Voila', 'last_name': 'Akullu', 'age': 16}\n\n\n\n# Accessing items\nprint(person['last_name'])\n\nAkullu\n\n\n\n# Adding items \nperson['middle_name'] = 'Vee'\nprint(person)\n\n{'first_name': 'Voila', 'last_name': 'Akullu', 'age': 16, 'middle_name': 'Vee'}\n\n\n\n# Remove items\nperson.pop('age')\nprint(person)\n\n{'first_name': 'Voila', 'last_name': 'Akullu', 'middle_name': 'Vee'}\n\n\n\nHomework\n\nCheck if an element exists\nFind the lenght of a dictionary\n\n\n# Nesting dictionaries\nemployees = {\n    'manager': {\n        'name': 'Akullu Viola',\n        'age': 29\n    },\n    'programmer': {\n        'name': 'Juma Shafara',\n        'age': 30\n    }\n}\n\nprint(employees)\n\n{'manager': {'name': 'Akullu Viola', 'age': 29}, 'programmer': {'name': 'Juma Shafara', 'age': 30}}\n\n\n\n# Accessing nested dictionary\nprogrammer = employees['programmer']\nprint(programmer['name'])\n\nJuma Shafara\n\n\n\n# Using a dictionary constructer\nnames = ('a1', 'b2', 'c3')\ndictionary = dict(names)\nprint(dictionary)\n\n{'a': '1', 'b': '2', 'c': '3'}\n\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Containers"
    ]
  },
  {
    "objectID": "4.Python/03_numbers.html",
    "href": "4.Python/03_numbers.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "4.Python",
      "Numbers"
    ]
  },
  {
    "objectID": "4.Python/03_numbers.html#numbers",
    "href": "4.Python/03_numbers.html#numbers",
    "title": "DATAIDEA",
    "section": "Numbers",
    "text": "Numbers\n\n \n\nIn python, there are three types of numbers\n\nInteger - int\nFloating Point - float\nComplex - complex",
    "crumbs": [
      "Home",
      "4.Python",
      "Numbers"
    ]
  },
  {
    "objectID": "4.Python/03_numbers.html#types",
    "href": "4.Python/03_numbers.html#types",
    "title": "DATAIDEA",
    "section": "Types",
    "text": "Types\n\nInteger\nAn integer is a number without decimals\n\n# Python Numbers: intgers\n\na = 3\nb = 4\nnumber = 5\n\nprint('a:', a)\nprint('b:', b)\nprint('number:', number)\n\na: 3\nb: 4\nnumber: 5\n\n\n\n\nFloating Point\nA floating point number of just a float is a number with decimals\n\n# Python Numbers: floating point\na = 3.0\nb = 4.21\nnumber = 5.33\n\nprint('a:', a)\nprint('b:', b)\nprint('number:', number)\n\na: 3.0\nb: 4.21\nnumber: 5.33\n\n\n\n\nComplex\nA comple number is an imaginary number. To yield a complex number, append a j o J to a numeric value\n\n# Python Numbers: complex\n\na = 3j\nb = 5.21j\nnumber = 4 + 5.33j\n\nprint('a:', a)\nprint('b:', b)\nprint('number:', number)\n\na: 3j\nb: 5.21j\nnumber: (4+5.33j)",
    "crumbs": [
      "Home",
      "4.Python",
      "Numbers"
    ]
  },
  {
    "objectID": "4.Python/03_numbers.html#number-arthmetics",
    "href": "4.Python/03_numbers.html#number-arthmetics",
    "title": "DATAIDEA",
    "section": "Number Arthmetics",
    "text": "Number Arthmetics\n\n# By Juma Shafara\n\n# Python Numbers: arthmetics\n\nsummation = 4 + 2\nprint('sum:', summation)\n\ndifference = 4 - 2\nprint('difference:', difference)\n\nproduct = 4 * 2\nprint('product:', product)\n\nquotient = 4 / 2\nprint('quotient:', quotient)\n\nsum: 6\ndifference: 2\nproduct: 8\nquotient: 2.0",
    "crumbs": [
      "Home",
      "4.Python",
      "Numbers"
    ]
  },
  {
    "objectID": "4.Python/03_numbers.html#number-methods",
    "href": "4.Python/03_numbers.html#number-methods",
    "title": "DATAIDEA",
    "section": "Number Methods",
    "text": "Number Methods\nNumber methods are special functions used to work with numbers\n\n# sum() can add many numbers at once\nsummation = sum([1,2,3,4,5,6,7,8,9,10])\nprint(summation)\n\n55\n\n\n\n# round() rounds a number to a specified number of decimal places\npi = 3.14159265358979\nrounded_pi = round(pi, 3)\n\nprint('pi:', pi)\nprint('rounded_pi:', rounded_pi)\n\npi: 3.14159265358979\nrounded_pi: 3.142\n\n\n\n# abs() returns the absolute value of a number\nnumber = -5\nabsolute_value = abs(number)\nprint('absolute value of', number, 'is', absolute_value)\n\nabsolute value of -5 is 5\n\n\n\n# pow() returns the value of x to the power of y)\nfour_power_two = pow(4, 2)\nprint(four_power_two)\n\n16\n\n\n\n# divmod() returns the quotient and remainder of a division\n# division = divmod(10, 3)\nquotient, remainder = divmod(10, 3)\nprint('Quotient:', quotient)\nprint('Remainder:', remainder)\n\nQuotient: 3\nRemainder: 1\n\n\nA few ads maybe displayed for income as resources are now offered freely. 🤝🤝🤝",
    "crumbs": [
      "Home",
      "4.Python",
      "Numbers"
    ]
  },
  {
    "objectID": "5.Django/00_outline.html",
    "href": "5.Django/00_outline.html",
    "title": "Django",
    "section": "",
    "text": "Module 1: Understanding Web Architecture:\n\nOverview of client-server architecture and the role of web browsers and servers.\nIntroduction to HTTP protocol and the request-response cycle.\nExploring the front-end and back-end components of web development.\nReview of HTML and CSS\n\n\n\nModule 2: Introduction to Django\n\nUnderstanding the MVC (Model-View-Controller) architecture\nInstalling Django and setting up a project\nCreating and configuring Django apps\nOverview of Django’s file structure\n\n\n\nModule 3: Building Models\n\nIntroduction to Django models and ORM (Object-Relational Mapping)\nDefining models and fields\nDatabase migrations with Django’s built-in migration system\nPerforming CRUD (Create, Read, Update, Delete) operations with models\n\n\n\nModule 4: Views and Templates\n\nCreating views and URL patterns\nRendering templates with Django’s template engine\nPassing data from views to templates\nUtilizing template inheritance and template tags\n\n\n\nModule 5: Forms and Form Handling\n\nCreating HTML forms using Django’s Form class\nValidating form data and handling form submissions\nCustomizing form behavior and appearance\nUsing Django’s built-in form processing features\n\n\n\nModule 7: Authentication and Authorization\n\nImplementing user authentication with Django’s built-in authentication system\nManaging user accounts: registration, login, logout, and password reset\nUnderstanding user permissions and authorization\nSecuring views and restricting access to authenticated users\n\n\n\nModule 8: Django Admin Interface\n\nOverview of Django’s admin interface and its features\nCustomizing the admin interface: registering models, customizing forms, and list displays\nAdding custom actions and filters to the admin interface\nSecuring and restricting access to the admin interface\n\n\n\nModule 9: Working with Static Files and Media\n\nHandling static files (CSS, JavaScript, images) in Django projects\nConfiguring Django to serve static files in development and production environments\nUploading and serving media files (user-uploaded files) in Django applications\nUsing third-party libraries for advanced static files management\n\n\n\nModule 9: REST APIs with Django Rest Framework (Optional)\n\nIntroduction to RESTful APIs and their principles\nInstalling and configuring Django Rest Framework\nBuilding RESTful APIs for CRUD operations using Django models\nAuthentication, permissions, and serialization in Django Rest Framework\n\n\n\nModule 10: Integration of Machine Learning Models\n\nOverview of integrating machine learning models into Django applications\nPreparing machine learning models for deployment: training, evaluation, and serialization\nIntegrating machine learning models with Django views for real-time predictions\nHandling input data and formatting output predictions in Django templates\n\n\n\nModule 11: Deployment and Scaling\n\nPreparing a Django project for deployment: settings management, security considerations, and environment setup\nDeploying Django applications to popular hosting platforms (Heroku, PythonAnywhere, DigitalOcean, etc.)\nConfiguring production servers and web servers (Gunicorn, Nginx, etc.)\nStrategies for scaling Django applications to handle increased traffic and load\n\n\n\nCouse Projects\n\nChatbot (with AI)\nPlant Disease Detector AI\nMental Health Website (with a chatbot)\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "5.Django",
      "Django"
    ]
  },
  {
    "objectID": "2.CSS/00_outline.html#css-course-outline",
    "href": "2.CSS/00_outline.html#css-course-outline",
    "title": "DATAIDEA",
    "section": "CSS Course Outline",
    "text": "CSS Course Outline\n\nBasics\n\nIntroduction\nSyntax and Selectors\nInserting\nColors\nBackgrounds\nBorders\nMargins\nPadding\nWidth and Height\nBox Models\nText\nFonts\nIcons\nLinks\nTables\nOutlines\nButtons\nButtons\nImages\nOpacity\n\n\n\nCSS Layout\n\nThe display Property\nThe width and max-width Properties\nPositioning\nOverflow\nfloat and clear Properties\ninline-block\nHorizontal and Vertical Align\n\n\n\nSelectors\n\nCombinators\nPseudoclasses\nPseudoelements\nAttribute Selectors\n\n\n\nData Types\n\nInteger\nNumber\nLength\nPercentage\nString\nColor\nUrl\nAngle\n\n\n\nDon’t miss out on any updates and developments! Subscribe to the DATAIDEA Newsletter it’s easy and safe.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Course Outline"
    ]
  },
  {
    "objectID": "2.CSS/06_borders.html",
    "href": "2.CSS/06_borders.html",
    "title": "CSS Borders",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Borders"
    ]
  },
  {
    "objectID": "2.CSS/06_borders.html#borders",
    "href": "2.CSS/06_borders.html#borders",
    "title": "CSS Borders",
    "section": "Borders",
    "text": "Borders\nIn CSS, we decorae borders with lines, make it square or rounded.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Borders"
    ]
  },
  {
    "objectID": "2.CSS/06_borders.html#border-style",
    "href": "2.CSS/06_borders.html#border-style",
    "title": "CSS Borders",
    "section": "Border Style",
    "text": "Border Style\nThe border-style CSS property sets the line style forall four sides of an element’s border.\nValid Values:\n\nnone:displays no border\nhidden: displays no border\ndotted: displays a series of rounded dots\ndashed: displays a series of short square-ended dashes or line segments\nsolid: displays a single straight solid line\ndouble: displays two straight lines\ngroove: displays a border with a carved apperarance\nridge: displays a border with an extruded appearance\ninset: displays a border that makes the element appear embedded\noutset: displays a border that makes the element appear embossed\n\nExample: Here’s an example of a dashed border\np {\n    border-style: dashed;\n}\nResult:\n\nThis is some content in a dashed border\n\nExample: Here’s an example of a solid border\np {\n    border-style: solid;\n}\nResult:\n\nThis is some content in a solid border",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Borders"
    ]
  },
  {
    "objectID": "2.CSS/06_borders.html#border-width",
    "href": "2.CSS/06_borders.html#border-width",
    "title": "CSS Borders",
    "section": "Border Width",
    "text": "Border Width\nWe can specify the widths of an element’s borders using the border-width CSS property\nValid values:\n\nthin: displays a thin border\nmedium: displays a medium border\nthick: displays a thick border\n&lt;length&gt;\n\nBelow is an example of usinga &lt;length&gt; value.\ndiv {\n    border-width: 10px;\n    border-style: solid;\n    width: 250px;\n    height: 250px;\n    background: yellow;\n}\nResult:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Borders"
    ]
  },
  {
    "objectID": "2.CSS/06_borders.html#border-color",
    "href": "2.CSS/06_borders.html#border-color",
    "title": "CSS Borders",
    "section": "Border Color",
    "text": "Border Color\nThe border-color CSS property defines the color of a border.\nValid value:\n\n&lt;color&gt;\n\nExample:\ndiv {\n    border-style: groove;\n    border-width: 5px;\n    border-color: magenta;\n    width: 250px;\n    height: 250px;\n    background: yellow;\n}\nResult:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Borders"
    ]
  },
  {
    "objectID": "2.CSS/06_borders.html#css-borders---individual-sides",
    "href": "2.CSS/06_borders.html#css-borders---individual-sides",
    "title": "CSS Borders",
    "section": "CSS Borders - Individual Sides",
    "text": "CSS Borders - Individual Sides\nIn CSS, we can specify border styles, widths, and colors on each side (top, right, bottom, left)\nWe can achieve this by using the following CSS properties.\n\nborder-top-style\nborder-right-style\nborder-bottom-style\nborder-left-style\nborder-top-width\nborder-right-width\nborder-bottom-width\nborder-left-width\nborder-top-color\nborder-right-color\nborder-bottom-color\nborder-left-color\n\nChanging border style on each side example:\ndiv {\n    border-top-style: solid;\n    border-right-style: dotted;\n    border-bottom-style: dashed;\n    border-left-style: groove;\n    border-width: 5px;\n    border-color: red;\n    width: 250px;\n    height: 250px;\n    background: lightgrey;\n}\nResult:\n\n\n\nChanging border width on each side example:\ndiv {\n    border-top-width: 5px;\n    border-right-width: 10px;\n    border-bottom-width: 15px;\n    border-left-width: 20px;\n    border-color: red;\n    border-style: solid;\n    width: 250px;\n    height: 250px;\n    background: lightgrey;\n}\nResult:\n\n\n\nChanging border color on each side example:\ndiv {\n    border-top-color: blue;\n    border-right-color: red;\n    border-bottom-color: green;\n    border-left-color: black;\n    border-style: solid;\n    border-width: 5px;\n    width: 250px;\n    height: 250px;\n    background: lightgrey;\n}\nResult:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Borders"
    ]
  },
  {
    "objectID": "2.CSS/06_borders.html#css-border---shorthand-property",
    "href": "2.CSS/06_borders.html#css-border---shorthand-property",
    "title": "CSS Borders",
    "section": "CSS Border - Shorthand Property",
    "text": "CSS Border - Shorthand Property\nThe border CSS property sets an element’s border. It’s a shorthand for the following CSS properties.\n\nborder-width\nborder-style\nborder-color\n\nAs with all shorthand properties, any omitted sub-values will be set to their initial sub-value\nHowever, in this shorthand property, the border-style’s value is required.\nOrder does not matter.\nExample:\ndiv {\n    border: 5px solid green;\n    width: 250px;\n    height: 250px;\n    background: lightgrey;\n}\nResult:\n\n\n\n\n\nNote!\n\n\nThe border property increases elements’outer size except table and td elements.\n\n\nFor instance, an element with a width and height of 20px and a border of 5px will have an outer width and height of 30px (20px width + 5px border-left-width + 5px `border-right-width = 30px outer width)\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Borders"
    ]
  },
  {
    "objectID": "2.CSS/07_margins.html",
    "href": "2.CSS/07_margins.html",
    "title": "CSS Margins",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Margins"
    ]
  },
  {
    "objectID": "2.CSS/07_margins.html#margins",
    "href": "2.CSS/07_margins.html#margins",
    "title": "CSS Margins",
    "section": "Margins",
    "text": "Margins\nCSS Margins create space around or outside and element.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Margins"
    ]
  },
  {
    "objectID": "2.CSS/07_margins.html#css-margins---individual-sides",
    "href": "2.CSS/07_margins.html#css-margins---individual-sides",
    "title": "CSS Margins",
    "section": "CSS Margins - Individual Sides",
    "text": "CSS Margins - Individual Sides\nThe following properties set the length of the margin each side\n\nmargin-top: sets the margin area on top of an element\nmargin-right: sets the margin area on the right of an element\nmargin-bottom: sets the margin area on the bottom side of an element\nmargin-left: sets the margin area on the left side of an element\n\nValid values:\n\n&lt;length&gt;\n&lt;percentage&gt;\nauto: selects a suitable margin to use. For example in certain cases this value can be used toe center an element.\n\nElement:\nHere’s an example of using margins\ndiv {\n    margin-top: 30px;\n    margin-left: 90px;\n    background: lightgrey;\n    border: 5px solid red;\n    width: 200px;\n    height: 200px;\n}\nOutput:\n\n\n\n\n\nNote!\n\n\nThe margin sorrounds a CSS box, and pushes up against other CSS boxes in the layout. You will learn about CSS box models in the next few lessons",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Margins"
    ]
  },
  {
    "objectID": "2.CSS/07_margins.html#css-margin---shorthand-property",
    "href": "2.CSS/07_margins.html#css-margin---shorthand-property",
    "title": "CSS Margins",
    "section": "CSS Margin - Shorthand Property",
    "text": "CSS Margin - Shorthand Property\nThe margin CSS property is a shorthand for the following properties\n\nmargin-top\nmargin-right\nmargin-bottom\nmargin-left\n\nThe margin property can have one, two, three, or four values.\n\nWhen one value is specified, it applies the same margin to all four sides\nWhen two values are specified, the first value applies to the top and bottom, the second to the left and right\nWhen three values are specified, the first value applies to the top, the second to the left and right,the third to the bottom\nWhen four values are specified, the margins apply to the top, right, bottom and left in that order (clockwise) respectively.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Margins"
    ]
  },
  {
    "objectID": "2.CSS/07_margins.html#horizontally-centering-an-element",
    "href": "2.CSS/07_margins.html#horizontally-centering-an-element",
    "title": "CSS Margins",
    "section": "Horizontally Centering an Element",
    "text": "Horizontally Centering an Element\nWe can center an element by setting the left and right margins to auto.\ndiv {\n    margin: 0 auto;\n    width: 200px;\n    height: 200px;\n    border: 5px solid green;\n    background: lightgrey;\n}\nResult:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Margins"
    ]
  },
  {
    "objectID": "2.CSS/07_margins.html#the-inherit-value",
    "href": "2.CSS/07_margins.html#the-inherit-value",
    "title": "CSS Margins",
    "section": "The inherit Value",
    "text": "The inherit Value\nSince the inherit value is a global value, it can work on almost all the CSS properties\nBelow is an example of a child element inheriting margin from its parent element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;DATAIDEA&lt;/title&gt;\n        &lt;style type=\"text/css\"&gt;\n            div#parent {\n                margin-left: 50px;\n                border: 5px solid green;\n            }\n\n            p#child {\n                margin-left: inherit;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h3&gt;The inherit Global Value&lt;/h3&gt;\n        &lt;div id=\"parent\"&gt;\n            &lt;p id=\"child\"&gt;This element's left margin is inherited from the parent&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\nResult:\n\n\nThis element’s left margin is inherited from the parent\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Margins"
    ]
  },
  {
    "objectID": "2.CSS/09_width_and_height.html",
    "href": "2.CSS/09_width_and_height.html",
    "title": "CSS Width, Height",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Width, Height"
    ]
  },
  {
    "objectID": "2.CSS/09_width_and_height.html#width-and-height",
    "href": "2.CSS/09_width_and_height.html#width-and-height",
    "title": "CSS Width, Height",
    "section": "Width and Height",
    "text": "Width and Height\nThe width and height CSS properties set the width/heght of an element.\nBy default, these properties define the width/height of the content area/box\nValid values:\n\n&lt;length&gt;\n&lt;percentage&gt;\nauto: calculates and selects a width/height for the element\nmax-content: the intrinsic prefered width\nmin-content: the intrinsic minimum height\navailable: containing block width minus horizontal margin, border and padding\nfit-content: the larger of: the intrinsic minimum width; the smaller of the intrinsic preferred width and the available width\n\n\n\nNote!\n\n\nThe width and height attributes only set the area inside the padding, border and margin of the element anddoes not include them.\n\n\nExample:\nHere is an example of the width CSS property\n#div1 {\n    width: 200px;\n}\n\n#div2 {\n    width: 5em;\n}\n\n#div3 {\n    width: 75%;\n}\n\n#div4 {\n    width: auto;\n}\n\ndiv {\n    height: 200px;\n    border: 2px solid red;\n    margin: 5px;\n}\nResult:\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\nHere is an example of the height CSS property\n#div1 {\n    height: 200px;\n}\n\n#div2 {\n    height: 5em;\n}\n\n#div3 {\n    height: 75%;\n}\n\n#div4 {\n    height: auto;\n}\n\ndiv {\n    height: 200px;\n    border: 2px solid red;\n    margin: 5px;\n}\nResult:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Width, Height"
    ]
  },
  {
    "objectID": "2.CSS/09_width_and_height.html#minimum-and-maximum-widths-and-heights",
    "href": "2.CSS/09_width_and_height.html#minimum-and-maximum-widths-and-heights",
    "title": "CSS Width, Height",
    "section": "Minimum and Maximum Widths and Heights",
    "text": "Minimum and Maximum Widths and Heights\nThe following properties define CSS minimum and maximum widths and heights\n\nmin-width: sets the minimum width of an element.\nmax-width: sets the maximum width of an element.\nmin-height: sets the minimum height of an element.\nmax-height: sets the maximum height of an element\n\nValid values:\n\n&lt;length&gt;\n&lt;percentage&gt;\n\n\nExamples\nHere’s an example of the min-width CSS property.\np {\n    min-width: 500px;\n    background: lightblue;\n}\nResult:\n\nHere’s an example of the min-width CSS property.\n\nHere’s an example of the max-width CSS property.\np {\n    max-width: 250px;\n    background: lightgreen;\n}\nResult:\n\nHere’s an example of the max-width CSS property.\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Width, Height"
    ]
  },
  {
    "objectID": "2.CSS/03_inserting.html",
    "href": "2.CSS/03_inserting.html",
    "title": "CSS Inserting",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Inserting"
    ]
  },
  {
    "objectID": "2.CSS/03_inserting.html#css-inserting",
    "href": "2.CSS/03_inserting.html#css-inserting",
    "title": "CSS Inserting",
    "section": "CSS Inserting",
    "text": "CSS Inserting\nInserting CSS into an HTML document can be done in several ways:",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Inserting"
    ]
  },
  {
    "objectID": "2.CSS/03_inserting.html#external-css",
    "href": "2.CSS/03_inserting.html#external-css",
    "title": "CSS Inserting",
    "section": "External CSS",
    "text": "External CSS\nThis method involves linking an external CSS file to your HTML document using the &lt;link&gt; element within the &lt;head&gt; section of your HTML file. This is the recommended method for larger projects as it keeps your HTML and CSS separate, making your code more maintainable and easier to manage.\nExample:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- Your HTML content here --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this example, the CSS file styles.css and the HTML file are saved in the same directory/folder\nYou can try it as well, just follow these steps.\n\nCreate a folder in root directory.\nSave the HTML file in that folder.\nSave the style.css file in that folder.\nRun/Open the HTML file using any browser",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Inserting"
    ]
  },
  {
    "objectID": "2.CSS/03_inserting.html#internal-css",
    "href": "2.CSS/03_inserting.html#internal-css",
    "title": "CSS Inserting",
    "section": "Internal CSS",
    "text": "Internal CSS\nWith this method, CSS rules are written directly within the &lt;style&gt; element in the &lt;head&gt; section of your HTML document. This is useful for small-scale projects or when you need to apply specific styles to a single page.\nExample:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    /* CSS rules here */\n    body {\n      background-color: #f0f0f0;\n    }\n    h1 {\n      color: blue;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- Your HTML content here --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this example, CSS rules are defined within the &lt;style&gt; element.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Inserting"
    ]
  },
  {
    "objectID": "2.CSS/03_inserting.html#inline-css",
    "href": "2.CSS/03_inserting.html#inline-css",
    "title": "CSS Inserting",
    "section": "Inline CSS",
    "text": "Inline CSS\nThis method involves applying CSS styles directly to individual HTML elements using the style attribute. While this approach provides the most immediate control over styling, it’s generally considered less maintainable and should be used sparingly.\nExample:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1 style=\"color: blue;\"&gt;This is a heading&lt;/h1&gt;\n&lt;p style=\"font-size: 16px;\"&gt;This is a paragraph.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\nIn this example, inline styles are applied directly to the &lt;h1&gt; and &lt;p&gt; elements using the style attribute.\n\n\nNote!\n\n\nChoose the method that best fits your project’s requirements and development workflow. For larger projects, external CSS files linked via link elements are generally preferred, while smaller projects or quick prototyping may benefit from internal or inline CSS.\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "2.CSS",
      "CSS Inserting"
    ]
  },
  {
    "objectID": "1.HTML/02_editors.html",
    "href": "1.HTML/02_editors.html",
    "title": "DATAIDEA",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Editors"
    ]
  },
  {
    "objectID": "1.HTML/02_editors.html#html-editors",
    "href": "1.HTML/02_editors.html#html-editors",
    "title": "DATAIDEA",
    "section": "HTML Editors",
    "text": "HTML Editors\nCreating and editing HTML files is relatively straightforward, and you can do it using a variety of tools and software. Here are some common methods and tools:\n\nText Editors: You can use basic text editors like Notepad (Windows), TextEdit (Mac), or any other plain text editor available on your operating system. Simply open the text editor, write your HTML code, and save the file with a .html extension.\nIntegrated Development Environments (IDEs): IDEs like Visual Studio Code, Sublime Text, Atom, or Brackets provide more advanced features specifically designed for coding. They offer syntax highlighting, code completion, and various plugins/extensions for web development, making coding HTML more efficient.\nOnline HTML Editors: Several websites offer online HTML editors where you can write and test HTML code directly in your web browser. Some popular options include CodePen, JSFiddle, and JS Bin. These platforms often provide real-time previews of your code, making it easy to see how changes affect the webpage.\nContent Management Systems (CMS): If you’re creating web pages for a website or blog, you might use a CMS like WordPress, Joomla, or Drupal. These platforms often have built-in editors that allow you to create and edit content using a visual interface. However, you can usually access the underlying HTML code for more precise control over the layout and design.\nCommand Line: For more advanced users, you can use command-line text editors like Vim or Emacs to create and edit HTML files directly from the terminal or command prompt.\n\n\n\nNote!\n\n\nIn these tutorials, we’ll use JSFiddle for editing our code and observing the results.\n\n\n\n\n\n\n\nOnce you’ve chosen a method and tool for creating/editing HTML files, you can start by:\n\nOpening the chosen editor or tool.\nWriting your HTML code, including tags like &lt;html&gt;, &lt;head&gt;, &lt;body&gt;, etc., to structure your webpage.\nAdding content like text, images, links, and other HTML elements as needed.\nSaving the file with a .html extension to your computer.\n\nAfter creating your HTML file, you can open it in a web browser to preview how it looks. Simply double-click the file, and it should open in your default web browser, displaying the webpage you’ve created.\nRemember to test your HTML code across different web browsers to ensure compatibility and to validate it using tools like the W3C Markup Validation Service to catch any errors or issues.\n\n\n\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Editors"
    ]
  },
  {
    "objectID": "1.HTML/comments.html",
    "href": "1.HTML/comments.html",
    "title": "HTML Comments",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Comments"
    ]
  },
  {
    "objectID": "1.HTML/comments.html#comments",
    "href": "1.HTML/comments.html#comments",
    "title": "HTML Comments",
    "section": "Comments",
    "text": "Comments\nHTML comments are text, phrases or sentences inside an HTML file.\nThey are only shown in codes and not rendered by a browser.\n\nWhy use HTML comments?\nHTML comments help both beginners and experienced web developers to easily organize their codes.\nThey act like sticky notes in HTML files\n\n\nHow to write HTML comments\nAn HTML comment starts with &lt;!-- and ends with --&gt;. It looks like this:\n&lt;!-- comments go here --&gt;\n\n\nExample\n\nSee the Pen  HTML_comments by DATAIDEA (@DATAIDEA) on CodePen.\n\n\nOn the example given above, you have learned that you make a single-line and multi-line of HTML comments.\nAnd if you have noticed we have also put comments beside a start tag and end tag.\nThat is for us to easily recognize where a specific element starts and ends.\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Comments"
    ]
  },
  {
    "objectID": "1.HTML/10_tables.html",
    "href": "1.HTML/10_tables.html",
    "title": "HTML Tables",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Tables"
    ]
  },
  {
    "objectID": "1.HTML/10_tables.html#tables",
    "href": "1.HTML/10_tables.html#tables",
    "title": "HTML Tables",
    "section": "Tables",
    "text": "Tables\nHTML tables are used to display data in a tabular format, which is organized into rows and columns. Tables are an essential tool for presenting structured data clearly and concisely. Understanding how to create and format tables is crucial for web development.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Tables"
    ]
  },
  {
    "objectID": "1.HTML/10_tables.html#basic-structure-of-an-html-table",
    "href": "1.HTML/10_tables.html#basic-structure-of-an-html-table",
    "title": "HTML Tables",
    "section": "Basic Structure of an HTML Table",
    "text": "Basic Structure of an HTML Table\nAn HTML table is created using the &lt;table&gt; element. Inside the table, rows are defined using the &lt;tr&gt; (table row) element, headers using the &lt;th&gt; (table header) element, and data cells using the &lt;td&gt; (table data) element.\nExample:\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Header 1&lt;/th&gt;\n    &lt;th&gt;Header 2&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Data 1&lt;/td&gt;\n    &lt;td&gt;Data 2&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\nOutput:\n\n\n\nHeader 1\n\n\nHeader 2\n\n\n\n\nData 1\n\n\nData 2\n\n\n\nIn this example, the table has one header row and one data row.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Tables"
    ]
  },
  {
    "objectID": "1.HTML/10_tables.html#table-elements-and-attributes",
    "href": "1.HTML/10_tables.html#table-elements-and-attributes",
    "title": "HTML Tables",
    "section": "Table Elements and Attributes",
    "text": "Table Elements and Attributes\n\n1. Table Headers\nTable headers are defined using the &lt;th&gt; element. Headers are typically displayed in bold and centered text.\n&lt;tr&gt;\n  &lt;th&gt;Header 1&lt;/th&gt;\n  &lt;th&gt;Header 2&lt;/th&gt;\n&lt;/tr&gt;\n\n\n2. Table Rows\nTable rows are defined using the &lt;tr&gt; element. Each row contains header or data cells.\n&lt;tr&gt;\n  &lt;td&gt;Data 1&lt;/td&gt;\n  &lt;td&gt;Data 2&lt;/td&gt;\n&lt;/tr&gt;\n\n\n3. Table Data\nTable data cells are defined using the &lt;td&gt; element. These cells hold the actual data.\n&lt;td&gt;Data 1&lt;/td&gt;\n&lt;td&gt;Data 2&lt;/td&gt;\n\n\n\n\n\n\n\n4. Table Caption\nThe &lt;caption&gt; element provides a title or caption for the table, which is typically displayed above the table.\n&lt;table&gt;\n  &lt;caption&gt;Table Title&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Header 1&lt;/th&gt;\n    &lt;th&gt;Header 2&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Data 1&lt;/td&gt;\n    &lt;td&gt;Data 2&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\nResult:\n\n\nTable Title\n\n\n\nHeader 1\n\n\nHeader 2\n\n\n\n\nData 1\n\n\nData 2\n\n\n\n\n\n5. Table Sectioning Elements\nTables can be divided into sections using the &lt;thead&gt;, &lt;tbody&gt;, and &lt;tfoot&gt; elements for better structure and styling.\n\n&lt;thead&gt;: Contains the header rows.\n&lt;tbody&gt;: Contains the body rows.\n&lt;tfoot&gt;: Contains the footer rows.\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Header 1&lt;/th&gt;\n      &lt;th&gt;Header 2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Data 1&lt;/td&gt;\n      &lt;td&gt;Data 2&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Data 3&lt;/td&gt;\n      &lt;td&gt;Data 4&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tfoot&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Footer 1&lt;/td&gt;\n      &lt;td&gt;Footer 2&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tfoot&gt;\n&lt;/table&gt;\nResult\n\n\n\n\nHeader 1\n\n\nHeader 2\n\n\n\n\n\n\nData 1\n\n\nData 2\n\n\n\n\nData 3\n\n\nData 4\n\n\n\n\n\n\nFooter 1\n\n\nFooter 2\n\n\n\n\n\n\n6. Colspan and Rowspan\n\ncolspan: Merges multiple columns into a single cell.\nrowspan: Merges multiple rows into a single cell.\n\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Header 1&lt;/th&gt;\n    &lt;th colspan=\"2\"&gt;Merged Header 2 and 3&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Data 1&lt;/td&gt;\n    &lt;td&gt;Data 2&lt;/td&gt;\n    &lt;td&gt;Data 3&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td rowspan=\"2\"&gt;Merged Data 1 and 2&lt;/td&gt;\n    &lt;td&gt;Data 4&lt;/td&gt;\n    &lt;td&gt;Data 5&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Data 6&lt;/td&gt;\n    &lt;td&gt;Data 7&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\nResult\n\n\n\nHeader 1\n\n\nMerged Header 2 and 3\n\n\n\n\nData 1\n\n\nData 2\n\n\nData 3\n\n\n\n\nMerged Data 1 and 2\n\n\nData 4\n\n\nData 5\n\n\n\n\nData 6\n\n\nData 7",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Tables"
    ]
  },
  {
    "objectID": "1.HTML/10_tables.html#example-of-a-fully-utilized-html-table",
    "href": "1.HTML/10_tables.html#example-of-a-fully-utilized-html-table",
    "title": "HTML Tables",
    "section": "Example of a Fully Utilized HTML Table",
    "text": "Example of a Fully Utilized HTML Table\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;HTML Table Example&lt;/title&gt;\n  &lt;style&gt;\n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n    th, td {\n      border: 1px solid black;\n      padding: 8px;\n      text-align: left;\n    }\n    th {\n      background-color: #f2f2f2;\n    }\n    caption {\n      caption-side: top;\n      font-size: 1.5em;\n      margin: 10px 0;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;table&gt;\n    &lt;caption&gt;Employee Data&lt;/caption&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Name&lt;/th&gt;\n        &lt;th&gt;Position&lt;/th&gt;\n        &lt;th&gt;Age&lt;/th&gt;\n        &lt;th&gt;Salary&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;John Doe&lt;/td&gt;\n        &lt;td&gt;Manager&lt;/td&gt;\n        &lt;td&gt;45&lt;/td&gt;\n        &lt;td&gt;$100,000&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Jane Smith&lt;/td&gt;\n        &lt;td&gt;Developer&lt;/td&gt;\n        &lt;td&gt;30&lt;/td&gt;\n        &lt;td&gt;$90,000&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Sam Brown&lt;/td&gt;\n        &lt;td&gt;Designer&lt;/td&gt;\n        &lt;td&gt;25&lt;/td&gt;\n        &lt;td&gt;$70,000&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n    &lt;tfoot&gt;\n      &lt;tr&gt;\n        &lt;td colspan=\"3\"&gt;Total Employees&lt;/td&gt;\n        &lt;td&gt;3&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tfoot&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nResult:\n&lt;!DOCTYPE html&gt;\n\n\n\n\nHTML Table Example\n\n\n\n\n\n\nEmployee Data\n\n\n\n\nName\n\n\nPosition\n\n\nAge\n\n\nSalary\n\n\n\n\n\n\nJohn Doe\n\n\nManager\n\n\n45\n\n\n$100,000\n\n\n\n\nJane Smith\n\n\nDeveloper\n\n\n30\n\n\n$90,000\n\n\n\n\nSam Brown\n\n\nDesigner\n\n\n25\n\n\n$70,000\n\n\n\n\n\n\nTotal Employees\n\n\n3",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Tables"
    ]
  },
  {
    "objectID": "1.HTML/10_tables.html#conclusion",
    "href": "1.HTML/10_tables.html#conclusion",
    "title": "HTML Tables",
    "section": "Conclusion",
    "text": "Conclusion\nHTML tables are a powerful way to present data in a structured and readable format. By understanding the various table elements and attributes, you can create complex and visually appealing tables that enhance the presentation of your data. Properly using table sectioning elements and attributes like colspan and rowspan allows for more flexible and dynamic table layouts.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Tables"
    ]
  },
  {
    "objectID": "1.HTML/styles.html",
    "href": "1.HTML/styles.html",
    "title": "HTML Styles",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Styles"
    ]
  },
  {
    "objectID": "1.HTML/styles.html#styles",
    "href": "1.HTML/styles.html#styles",
    "title": "HTML Styles",
    "section": "Styles",
    "text": "Styles\nHTML Styles are used to style HTML elements it also means changing the default values.\nFor instance, styling cna change the default values of the text color as black, background color as white, text alignment as left and text size as 12 pixels.\n\nInternal Style Sheet (internal styling)\nUsing an internal style sheet is also called internal styling.\nAn internal style sheet is composed of one or more cascading style sheet (css) rule set.\nA CSS rule-set consists of a selector and a declaration block sorrounded by curly braces that contains one or more CSS declarations separated by semicolons.\nEach declaration includes a CSS property name and a value, separated by a colon.\nThey are all enclosed inside the &lt;style&gt; element with its type=\"text/css\" attribute which is included inside the &lt;head&gt; element.\n\n\nInternal Style Sheet Syntax\n&lt;style type=\"text/css\"&gt;\n  p{\n    font-size: 14px;\n  }\n\n\nNote!\n\n\nThere will be alot of Internal Styling examples throughout the entire tutorial so just keep going and enjoy!\n\n\n\n\nInline Syling\nInline styling is used to style elements using the style attribute with CSS declaration inside which are similar to internal styling.\n\n\nInline Styling Syntax\n&lt;div style=\"property: value; property: value;\"&gt;&lt;/div&gt;\n\n\nBackground Color Example\n\nSee the Pen  Untitled by DATAIDEA (@DATAIDEA) on CodePen.\n\n\n\n\nText Color Example\n\nSee the Pen  Untitled by DATAIDEA (@DATAIDEA) on CodePen.\n\n\n\n\nText Sizing Example\n\nSee the Pen  Text Sizing Example by DATAIDEA (@DATAIDEA) on CodePen.\n\n\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Styles"
    ]
  },
  {
    "objectID": "1.HTML/links.html",
    "href": "1.HTML/links.html",
    "title": "HTML Links",
    "section": "",
    "text": "Photo by DATAIDEA",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Links"
    ]
  },
  {
    "objectID": "1.HTML/links.html#links",
    "href": "1.HTML/links.html#links",
    "title": "HTML Links",
    "section": "Links",
    "text": "Links\nHTML Links are very necessary for all web pages. All websites have links. HTML Links are hyperlinks.\nLinks help users jump from their current web page location to another.\nTo make HTML links we just need to use the &lt;a&gt; element with the href attribute that specifies a URL to a page.\n\nHTML Link Structure\n\nstart tag &lt;a&gt;\nhref attribute eg href=\"index.html\"\nelement content. A text eg Home Page. It can also be an image and other HTML elements\nend tag &lt;a&gt;\n\n\n\nInternal Linking\n\nExample:\n&lt;a href=\"file-in-the-same-folder.html\"&gt;Example&lt;/a&gt;\n\n\n\nExternal Linking\n\nExample:\n&lt;a href=\"https://movies.dataidea.org/\"&gt;Movies&lt;/a&gt;\n\n\n\nOpening Link in New Tab\n\nExample:\nWe can easily open a link in a new tab.\nTo do this, we need to use the target attribute with the value _blank.\nThis would be helpful if you do not want to your visitors to leave your website.\n&lt;a href=\"https://football.dataidea.org/\" target=\"_blank\"&gt;Movies&lt;/a&gt;\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Links"
    ]
  },
  {
    "objectID": "1.HTML/03_elements.html",
    "href": "1.HTML/03_elements.html",
    "title": "HTML Elements",
    "section": "",
    "text": "Photo by DATAIDEA\n\n\nIn the first lesson, we have studied about tags and things like start tag and end tag.\nAn HTML element is usually composed of a “start tag”, “element content” and “end tag”\nExample:\n\nThis example HTML Element above is composed of the following:\n\nstart tag: &lt;p&gt;\nelement content: This is an element content\nend tag: &lt;/p&gt;\n\n\nNested HTML Elements\nThere are some cases that an HTML element can contain one or more HTML elements.\nFor you to better understand it look at the example below.\n\nThe example nested HTML Elements above are composed of the following:\n\nStart tag. &lt;p&gt;\nStart tag. &lt;i&gt;\nElement Content. Italicized text\nEnd tag &lt;/i&gt;\nEnd tag &lt;/p&gt;\n\nOn the example above, there are two start tags and two end tags\nThe second tag ie. &lt;i&gt; italicizes the text within.\n\n\nEmpty Elements\nEmpty Elements are elements that do not have an element content and an end tag.\nA list of commonly used Empty Elements:\n\n&lt;meta /&gt;\n&lt;link /&gt;\n&lt;img /&gt;\n&lt;br /&gt;\n&lt;hr /&gt;\n&lt;input /&gt;\n\nThe best practice in HTML Empty Elements is to always put a forward slash / sign before the greater than sign.\nIn this way, they are closed at their start tags.\n\nTo be among the first to hear about future updates of the course materials, simply enter your email below, follow us on  (formally Twitter), or subscribe to our  YouTube channel.\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "1.HTML",
      "HTML Elements"
    ]
  }
]